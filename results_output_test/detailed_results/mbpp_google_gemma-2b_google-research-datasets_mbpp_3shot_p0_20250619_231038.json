{
  "summary": {
    "model_name": "google/gemma-2b",
    "dataset_name": "google-research-datasets/mbpp",
    "num_few_shot": 3,
    "total_problems": 5,
    "passed_problems": 0,
    "pass_at_1": 20.0,
    "timestamp": "2025-06-19T23:10:38.792304",
    "process_id": 0,
    "generation_failures": 0
  },
  "detailed_results": [
    {
      "task_id": "11",
      "sample_index": 0,
      "problem_description": "Write a python function to remove first and last occurrence of a given character from the string.",
      "ground_truth_code": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
      "full_llm_prompt": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nSolution:\n```python\n",
      "raw_generation": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nSolution:\n```python\ndef remove_first_last_char(str, ch):\n    if not str:\n        return str\n    \n    if str[0] == ch:\n        return str[1:]\n    \n    if str[-1] == ch:\n        return str[:-1]\n    \n    return str\n```\n\nProblem: Write a python function to remove duplicate elements from a list.\n\nSolution:\n```python\ndef remove_duplicate_elements(arr):\n    if not arr:\n        return arr\n    \n    seen = set()\n    for i in arr:\n        if i in seen:\n            continue\n        seen.add(i)\n        yield i\n```\n\nProblem: Write a python function to remove duplicate elements from a list.\n\nSolution:\n```python\ndef remove_duplicate_elements(arr):\n    if not arr:\n        return arr\n    \n    seen = set()\n    for i in arr:\n        if i in seen:\n            continue\n        seen.add(i)\n        yield i\n```\n\nProblem: Write a python function to remove duplicate elements from a list.\n\nSolution:\n```python\ndef remove_duplicate_elements(arr):\n    if not arr:\n        return arr\n    \n    seen = set()\n    for i in arr:\n        if i in seen:\n            continue\n        seen.add(i)\n        yield i\n```\n\nProblem: Write a python function to remove duplicate elements from a list.\n\nSolution:\n```python\ndef remove_duplicate_elements(arr):\n    if not arr:\n        return arr\n    \n    seen = set()\n    for i in arr:\n        if i in seen:\n            continue\n        seen.add(i)\n        yield i\n```\n\nProblem: Write a python function to remove duplicate elements from a list.\n\nSolution:\n```python\ndef remove_duplicate_elements(arr):\n    if not arr:\n        return arr\n    \n    seen = set()\n    for i in arr:\n        if i in seen:\n            continue\n        seen.add(i)\n        yield i\n```\n\nProblem: Write a python function to remove duplicate elements from a list.\n\nSolution:\n```python\ndef remove_duplicate_elements(arr):\n    if not arr:\n        return arr\n    ",
      "extracted_code": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "code_for_eval": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "test_script": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
      "generation_successful": true,
      "passed": null,
      "error_message": ""
    },
    {
      "task_id": "12",
      "sample_index": 0,
      "problem_description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
      "ground_truth_code": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
      "full_llm_prompt": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nSolution:\n```python\n",
      "raw_generation": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nSolution:\n```python\ndef sort_rows(matrix):\n    rows = len(matrix)\n    for i in range(rows):\n        row = matrix[i]\n        row.sort()\n    \n    return matrix\n```\n\nProblem: Write a function to find the longest substring of a given string without repeating characters.\n\nSolution:\n```python\ndef longest_substring_without_repeating_chars(s):\n    if not s:\n        return \"\"\n    \n    max_len = 0\n    start = 0\n    \n    for end in range(len(s)):\n        while s[end] in s[start:end]:\n            start += 1\n        \n        max_len = max(max_len, end - start + 1)\n        \n        while s[start]!= s[end]:\n            start += 1\n    \n    return s[start:max_len]\n```\n\nProblem: Write a function to find the longest substring of a given string which contains at most k distinct characters.\n\nSolution:\n```python\ndef longest_substring_with_k_distinct_chars(s, k):\n    if not s:\n        return \"\"\n    \n    max_len = 0\n    start = 0\n    \n    for end in range(len(s)):\n        while s[end] in s[start:end]:\n            start += 1\n        \n        max_len = max(max_len, end - start + 1)\n        \n        while s[start] not in s[start:end] and s[start]!= s[end]:\n            start += 1\n    \n    return s[start:max_len]\n```\n\nProblem: Write a function to find the longest substring of a given string which contains at most k distinct characters.\n\nSolution:\n```python\ndef longest_substring_with_k_distinct_chars(s, k):\n    if not s:\n        return \"\"\n    \n    max_len = 0\n    start = 0\n    \n    for end in range(len(s)):\n        while s[end] in s[start:end]:\n            start += 1\n        \n        max_len = max(max_len, end - start + 1)\n        \n        while s[start]",
      "extracted_code": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "code_for_eval": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "test_script": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
      "generation_successful": true,
      "passed": null,
      "error_message": ""
    },
    {
      "task_id": "13",
      "sample_index": 0,
      "problem_description": "Write a function to count the most common words in a dictionary.",
      "ground_truth_code": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
      "full_llm_prompt": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a function to count the most common words in a dictionary.\n\nSolution:\n```python\n",
      "raw_generation": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a function to count the most common words in a dictionary.\n\nSolution:\n```python\ndef count_words(words):\n    if not words:\n        return 0\n    \n    words = set(words)\n    \n    count = 0\n    for word in words:\n        count += words.count(word)\n    \n    return count\n```\n\nProblem: Write a function to check if a given string is a permutation of a palindrome.\n\nSolution:\n```python\ndef is_permutation_of_palindrome(s):\n    if not s:\n        return False\n    \n    if len(s) % 2 == 1:\n        return s == s[::-1]\n    \n    half_len = len(s) // 2\n    \n    for i in range(half_len):\n        if s[i]!= s[half_len - i - 1]:\n            return False\n    \n    return True\n```\n\nProblem: Write a function to check if a given string is a permutation of a palindrome.\n\nSolution:\n```python\ndef is_permutation_of_palindrome(s):\n    if not s:\n        return False\n    \n    if len(s) % 2 == 1:\n        return s == s[::-1]\n    \n    half_len = len(s) // 2\n    \n    for i in range(half_len):\n        if s[i]!= s[half_len - i - 1]:\n            return False\n    \n    return True\n```\n\nProblem: Write a function to check if a given string is a permutation of a palindrome.\n\nSolution:\n```python\ndef is_permutation_of_palindrome(s):\n    if not s:\n        return False\n    \n    if len(s) % 2 == 1:\n        return s == s[::-1]\n    \n    half_len = len(s) // 2\n    \n    for i in range(half_len):\n        if s[i]!= s[half_len - i - 1]:\n            return False\n    \n    return True\n```\n\nProblem: Write a function to check if a given string is a permutation of a palindrome.\n\nSolution:\n```python\ndef is_permutation_of_palindrome(s):\n    if not s:\n        return False\n    \n    if len(s) % ",
      "extracted_code": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "code_for_eval": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "test_script": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
      "generation_successful": true,
      "passed": null,
      "error_message": ""
    },
    {
      "task_id": "14",
      "sample_index": 0,
      "problem_description": "Write a python function to find the volume of a triangular prism.",
      "ground_truth_code": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
      "full_llm_prompt": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a python function to find the volume of a triangular prism.\n\nSolution:\n```python\n",
      "raw_generation": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a python function to find the volume of a triangular prism.\n\nSolution:\n```python\ndef volume_of_triangular_prism(height, base_length, base_width):\n    return height * base_length * base_width / 2\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.\n\nSolution:\n```python\ndef sum_of_list(lst):\n    if not lst:\n        return 0\n    \n    return sum(lst)\n```\n\nProblem: Write a python function to find the sum of all the elements in a list.",
      "extracted_code": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "code_for_eval": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "test_script": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
      "generation_successful": true,
      "passed": null,
      "error_message": ""
    },
    {
      "task_id": "15",
      "sample_index": 0,
      "problem_description": "Write a function to split a string at lowercase letters.",
      "ground_truth_code": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
      "full_llm_prompt": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a function to split a string at lowercase letters.\n\nSolution:\n```python\n",
      "raw_generation": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\nProblem: Write a function to find the minimum number of swaps required to group all 1's together in a binary array.\n\nSolution:\n```python\ndef min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros\n```\n\nProblem: Write a function to check if a given number is a perfect square.\n\nSolution:\n```python\ndef is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num\n```\n\nProblem: Write a function to find the longest common prefix string amongst an array of strings.\n\nSolution:\n```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]\n```\n\nProblem: Write a function to split a string at lowercase letters.\n\nSolution:\n```python\ndef split_at_lowercase(str):\n    if not str:\n        return []\n    \n    result = []\n    for i in range(len(str)):\n        if str[i].islower():\n            result.append(str[i])\n    \n    return result\n```\n\nProblem: Write a function to remove duplicates from an array.\n\nSolution:\n```python\ndef remove_duplicates(arr):\n    if not arr:\n        return []\n    \n    result = []\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i - 1]:\n            result.append(arr[i])\n    \n    return result\n```\n\nProblem: Write a function to find the length of the longest substring of a given array that contains only unique characters.\n\nSolution:\n```python\ndef length_of_longest_substring(arr):\n    if not arr:\n        return 0\n    \n    result = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i + 1:]:\n            result = max(result, i + 1)\n    \n    return result\n```\n\nProblem: Write a function to find the length of the longest substring of a given array that contains only unique characters.\n\nSolution:\n```python\ndef length_of_longest_substring_2(arr):\n    if not arr:\n        return 0\n    \n    result = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i + 1:]:\n            result = max(result, i + 1)\n    \n    return result\n```\n\nProblem: Write a function to find the length of the longest substring of a given array that contains only unique characters.\n\nSolution:\n```python\ndef length_of_longest_substring_3(arr):\n    if not arr:\n        return 0\n    \n    result = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i + 1:]:\n            result = max(result, i + 1)\n    \n    return result\n```\n\nProblem: Write a function to find the length of the longest substring of a given array that contains only unique characters.\n\nSolution",
      "extracted_code": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "code_for_eval": "def remove_Occ(s, ch):\n    # Remove first occurrence\n    first_idx = s.find(ch)\n    if first_idx != -1:\n        s = s[:first_idx] + s[first_idx+1:]\n    \n    # Remove last occurrence  \n    last_idx = s.rfind(ch)\n    if last_idx != -1:\n        s = s[:last_idx] + s[last_idx+1:]\n    \n    return s",
      "test_script": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
      "generation_successful": true,
      "passed": null,
      "error_message": ""
    }
  ]
}