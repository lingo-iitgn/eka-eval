[
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of John and send email reminder to john@example.com.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='QueryMeeting')]",
        "sample_id": 0,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of John and send email reminder to john@example.com.\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [QueryMeeting(user_name='John')]",
        "sample_id": 0,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of John and send email reminder to john@example.com.\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='John')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'John'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='EmailReminder')]",
        "sample_id": 0,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of John and send email reminder to john@example.com.\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='John')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'John'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='EmailReminder')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'EmailReminder'}, 'output': {'name': 'EmailReminder', 'description': 'This API sends an email reminder to the user with the meeting details.', 'input_parameters': {'content': {'type': 'str', 'description': 'The content of the email.'}, 'time': {'type': 'str', 'description': 'The time for the meeting. Format: %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location of the meeting.'}, 'recipient': {'type': 'str', 'description': 'The email address of the recipient.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [EmailReminder(content='Meeting with the client will be held at Room 1. Please be there on time.', time='2021-01-01 10:00:00', location='Room 1', recipient='john@example.com')]",
        "sample_id": 0,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of John and send email reminder to john@example.com.\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='John')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'John'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='EmailReminder')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'EmailReminder'}, 'output': {'name': 'EmailReminder', 'description': 'This API sends an email reminder to the user with the meeting details.', 'input_parameters': {'content': {'type': 'str', 'description': 'The content of the email.'}, 'time': {'type': 'str', 'description': 'The time for the meeting. Format: %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location of the meeting.'}, 'recipient': {'type': 'str', 'description': 'The email address of the recipient.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nAPI-Request: [EmailReminder(content='Meeting with the client will be held at Room 1. Please be there on time.', time='2021-01-01 10:00:00', location='Room 1', recipient='john@example.com')]->{'api_name': 'EmailReminder', 'input': {'content': 'Meeting with the client will be held at Room 1. Please be there on time.', 'time': '2021-01-01 10:00:00', 'location': 'Room 1', 'recipient': 'john@example.com'}, 'output': 'success', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [EmailReminder(content='Meeting about the new project will be held at Room 2. Please be there on time.', time='2021-01-02 10:00:00', location='Room 2', recipient='john@example.com')]",
        "sample_id": 0,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Mary and send email reminder to mary@example.com\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='QueryMeeting')]",
        "sample_id": 1,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Mary and send email reminder to mary@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [QueryMeeting(user_name='Mary')]",
        "sample_id": 1,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Mary and send email reminder to mary@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Mary')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Mary'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='EmailReminder')]",
        "sample_id": 1,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Mary and send email reminder to mary@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Mary')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Mary'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='EmailReminder')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'EmailReminder'}, 'output': {'name': 'EmailReminder', 'description': 'This API sends an email reminder to the user with the meeting details.', 'input_parameters': {'content': {'type': 'str', 'description': 'The content of the email.'}, 'time': {'type': 'str', 'description': 'The time for the meeting. Format: %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location of the meeting.'}, 'recipient': {'type': 'str', 'description': 'The email address of the recipient.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [EmailReminder(content='Meeting with the client will be held at Room 1. Please be there on time.', time='2021-01-01 10:00:00', location='Room 1', recipient='mary@example.com')]",
        "sample_id": 1,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Peter and send email reminder to peter@example.com\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='QueryMeeting')]",
        "sample_id": 2,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Peter and send email reminder to peter@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [QueryMeeting(user_name='Peter')]",
        "sample_id": 2,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Peter and send email reminder to peter@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Peter')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Peter'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='EmailReminder')]",
        "sample_id": 2,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Peter and send email reminder to peter@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Peter')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Peter'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting with the client', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['John', 'Mary', 'Peter']}, {'meeting_id': 2, 'meeting_name': 'Meeting about the new project', 'meeting_time': '2021-01-02 10:00:00', 'meeting_location': 'Room 2', 'meeting_attendees': ['John', 'Mary', 'Peter']}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='EmailReminder')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'EmailReminder'}, 'output': {'name': 'EmailReminder', 'description': 'This API sends an email reminder to the user with the meeting details.', 'input_parameters': {'content': {'type': 'str', 'description': 'The content of the email.'}, 'time': {'type': 'str', 'description': 'The time for the meeting. Format: %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location of the meeting.'}, 'recipient': {'type': 'str', 'description': 'The email address of the recipient.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [EmailReminder(content='Meeting with the client will be held at Room 1. Please be there on time.', time='2021-01-01 10:00:00', location='Room 1', recipient='peter@example.com')]",
        "sample_id": 2,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Tom and send email reminder to tom@example.com\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='QueryMeeting')]",
        "sample_id": 3,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Tom and send email reminder to tom@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [QueryMeeting(user_name='Tom')]",
        "sample_id": 3,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Tom and send email reminder to tom@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Tom')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Tom'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['Tom', 'Jerry']}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='EmailReminder')]",
        "sample_id": 3,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Tom and send email reminder to tom@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Tom')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Tom'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['Tom', 'Jerry']}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='EmailReminder')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'EmailReminder'}, 'output': {'name': 'EmailReminder', 'description': 'This API sends an email reminder to the user with the meeting details.', 'input_parameters': {'content': {'type': 'str', 'description': 'The content of the email.'}, 'time': {'type': 'str', 'description': 'The time for the meeting. Format: %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location of the meeting.'}, 'recipient': {'type': 'str', 'description': 'The email address of the recipient.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [EmailReminder(content='Meeting will be held at Room 1. Please be there on time.', time='2021-01-01 10:00:00', location='Room 1', recipient='tom@example.com')]",
        "sample_id": 3,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Jerry and send email reminder to jerry@example.com\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='QueryMeeting')]",
        "sample_id": 4,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Jerry and send email reminder to jerry@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [QueryMeeting(user_name='Jerry')]",
        "sample_id": 4,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Jerry and send email reminder to jerry@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Jerry')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Jerry'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['Tom', 'Jerry']}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='EmailReminder')]",
        "sample_id": 4,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Query meeting of Jerry and send email reminder to jerry@example.com\nAPI-Request: [ToolSearcher(keywords='QueryMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'QueryMeeting'}, 'output': {'name': 'QueryMeeting', 'description': \"The API for retrieving the meeting details from the user's calendar.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'meetings': {'type': 'list', 'description': 'List of meetings.'}}}, 'exception': None}\nAPI-Request: [QueryMeeting(user_name='Jerry')]->{'api_name': 'QueryMeeting', 'input': {'user_name': 'Jerry'}, 'output': {'meetings': [{'meeting_id': 1, 'meeting_name': 'Meeting', 'meeting_time': '2021-01-01 10:00:00', 'meeting_location': 'Room 1', 'meeting_attendees': ['Tom', 'Jerry']}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='EmailReminder')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'EmailReminder'}, 'output': {'name': 'EmailReminder', 'description': 'This API sends an email reminder to the user with the meeting details.', 'input_parameters': {'content': {'type': 'str', 'description': 'The content of the email.'}, 'time': {'type': 'str', 'description': 'The time for the meeting. Format: %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location of the meeting.'}, 'recipient': {'type': 'str', 'description': 'The email address of the recipient.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [EmailReminder(content='Meeting will be held at Room 1. Please be there on time.', time='2021-01-01 10:00:00', location='Room 1', recipient='jerry@example.com')]",
        "sample_id": 4,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=40.7128, longitude=74.006) and provide clothing recommendations based on the weather conditions.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 5,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=40.7128, longitude=74.006) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='40.7128', longitude='74.0060')]",
        "sample_id": 5,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=40.7128, longitude=74.006) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='40.7128', longitude='74.0060')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 40.7128, 'longitude': 74.006}, 'output': {'temperature': 10, 'humidity': 0.5, 'description': 'Clear'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='ClothingRecommendation')]",
        "sample_id": 5,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=40.7128, longitude=74.006) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='40.7128', longitude='74.0060')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 40.7128, 'longitude': 74.006}, 'output': {'temperature': 10, 'humidity': 0.5, 'description': 'Clear'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='ClothingRecommendation')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'ClothingRecommendation'}, 'output': {'name': 'ClothingRecommendation', 'description': 'API for providing clothing recommendations based on weather conditions.', 'input_parameters': {'temperature': {'type': 'float', 'description': 'Temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Relative humidity in percentage.'}, 'weather_conditions': {'type': 'str', 'description': 'Description of weather conditions.'}}, 'output_parameters': {'clothing_options': {'type': 'list', 'description': 'List of recommended clothing options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ClothingRecommendation(temperature='10', humidity='0.5', weather_conditions='Clear')]",
        "sample_id": 5,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=37.7749, longitude=122.4194) and provide clothing recommendations based on the weather conditions.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 6,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=37.7749, longitude=122.4194) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='37.7749', longitude='122.4194')]",
        "sample_id": 6,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=37.7749, longitude=122.4194) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='37.7749', longitude='122.4194')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 37.7749, 'longitude': 122.4194}, 'output': {'temperature': 20, 'humidity': 0.8, 'description': 'Cloudy'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='ClothingRecommendation')]",
        "sample_id": 6,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=37.7749, longitude=122.4194) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='37.7749', longitude='122.4194')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 37.7749, 'longitude': 122.4194}, 'output': {'temperature': 20, 'humidity': 0.8, 'description': 'Cloudy'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='ClothingRecommendation')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'ClothingRecommendation'}, 'output': {'name': 'ClothingRecommendation', 'description': 'API for providing clothing recommendations based on weather conditions.', 'input_parameters': {'temperature': {'type': 'float', 'description': 'Temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Relative humidity in percentage.'}, 'weather_conditions': {'type': 'str', 'description': 'Description of weather conditions.'}}, 'output_parameters': {'clothing_options': {'type': 'list', 'description': 'List of recommended clothing options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ClothingRecommendation(temperature='20', humidity='0.8', weather_conditions='Cloudy')]",
        "sample_id": 6,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=51.5074, longitude=0.1278) and provide clothing recommendations based on the weather conditions.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 7,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=51.5074, longitude=0.1278) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='51.5074', longitude='0.1278')]",
        "sample_id": 7,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=51.5074, longitude=0.1278) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='51.5074', longitude='0.1278')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 51.5074, 'longitude': 0.1278}, 'output': {'temperature': 5, 'humidity': 0.9, 'description': 'Rainy'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='ClothingRecommendation')]",
        "sample_id": 7,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=51.5074, longitude=0.1278) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='51.5074', longitude='0.1278')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 51.5074, 'longitude': 0.1278}, 'output': {'temperature': 5, 'humidity': 0.9, 'description': 'Rainy'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='ClothingRecommendation')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'ClothingRecommendation'}, 'output': {'name': 'ClothingRecommendation', 'description': 'API for providing clothing recommendations based on weather conditions.', 'input_parameters': {'temperature': {'type': 'float', 'description': 'Temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Relative humidity in percentage.'}, 'weather_conditions': {'type': 'str', 'description': 'Description of weather conditions.'}}, 'output_parameters': {'clothing_options': {'type': 'list', 'description': 'List of recommended clothing options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ClothingRecommendation(temperature='5', humidity='0.9', weather_conditions='Rainy')]",
        "sample_id": 7,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=48.8566, longitude=2.3522) and provide clothing recommendations based on the weather conditions.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 8,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=48.8566, longitude=2.3522) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='48.8566', longitude='2.3522')]",
        "sample_id": 8,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=48.8566, longitude=2.3522) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='48.8566', longitude='2.3522')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 48.8566, 'longitude': 2.3522}, 'output': {'temperature': 15, 'humidity': 0.7, 'description': 'Sunny'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='ClothingRecommendation')]",
        "sample_id": 8,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=48.8566, longitude=2.3522) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='48.8566', longitude='2.3522')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 48.8566, 'longitude': 2.3522}, 'output': {'temperature': 15, 'humidity': 0.7, 'description': 'Sunny'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='ClothingRecommendation')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'ClothingRecommendation'}, 'output': {'name': 'ClothingRecommendation', 'description': 'API for providing clothing recommendations based on weather conditions.', 'input_parameters': {'temperature': {'type': 'float', 'description': 'Temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Relative humidity in percentage.'}, 'weather_conditions': {'type': 'str', 'description': 'Description of weather conditions.'}}, 'output_parameters': {'clothing_options': {'type': 'list', 'description': 'List of recommended clothing options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ClothingRecommendation(temperature='15', humidity='0.7', weather_conditions='Sunny')]",
        "sample_id": 8,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=35.6762, longitude=139.6503) and provide clothing recommendations based on the weather conditions.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 9,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=35.6762, longitude=139.6503) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='35.6762', longitude='139.6503')]",
        "sample_id": 9,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=35.6762, longitude=139.6503) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='35.6762', longitude='139.6503')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 35.6762, 'longitude': 139.6503}, 'output': {'temperature': 25, 'humidity': 0.6, 'description': 'Rainy'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='ClothingRecommendation')]",
        "sample_id": 9,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Get the current weather forecast for a specific location (latitude=35.6762, longitude=139.6503) and provide clothing recommendations based on the weather conditions.\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nAPI-Request: [GetWeatherForCoordinates(latitude='35.6762', longitude='139.6503')]->{'api_name': 'GetWeatherForCoordinates', 'input': {'latitude': 35.6762, 'longitude': 139.6503}, 'output': {'temperature': 25, 'humidity': 0.6, 'description': 'Rainy'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='ClothingRecommendation')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'ClothingRecommendation'}, 'output': {'name': 'ClothingRecommendation', 'description': 'API for providing clothing recommendations based on weather conditions.', 'input_parameters': {'temperature': {'type': 'float', 'description': 'Temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Relative humidity in percentage.'}, 'weather_conditions': {'type': 'str', 'description': 'Description of weather conditions.'}}, 'output_parameters': {'clothing_options': {'type': 'list', 'description': 'List of recommended clothing options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ClothingRecommendation(temperature='25', humidity='0.6', weather_conditions='Rainy')]",
        "sample_id": 9,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='OrganizationMembers')]",
        "sample_id": 10,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [OrganizationMembers(organization='Alibaba')]",
        "sample_id": 10,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Alibaba')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Alibaba'}, 'output': {'members': ['John', 'Mary', 'Peter']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TravelStatus')]",
        "sample_id": 10,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Alibaba')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Alibaba'}, 'output': {'members': ['John', 'Mary', 'Peter']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='John')]",
        "sample_id": 10,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Alibaba')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Alibaba'}, 'output': {'members': ['John', 'Mary', 'Peter']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='John')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'John'}, 'output': 'Traveling', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Mary')]",
        "sample_id": 10,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Alibaba')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Alibaba'}, 'output': {'members': ['John', 'Mary', 'Peter']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='John')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'John'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Mary')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Mary'}, 'output': 'Working from home', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Peter')]",
        "sample_id": 10,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Alibaba')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Alibaba'}, 'output': {'members': ['John', 'Mary', 'Peter']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='John')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'John'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Mary')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Mary'}, 'output': 'Working from home', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Peter')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Peter'}, 'output': 'Working from office', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AddMeeting')]",
        "sample_id": 10,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Alibaba who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Alibaba')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Alibaba'}, 'output': {'members': ['John', 'Mary', 'Peter']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='John')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'John'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Mary')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Mary'}, 'output': 'Working from home', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Peter')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Peter'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [ToolSearcher(keywords='AddMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AddMeeting'}, 'output': {'name': 'AddMeeting', 'description': 'This API allows users to make a reservation for a meeting and store the meeting information in the database.Function\uff1aAllow users to make a reservation for a meeting.Exception Handling\uff1a1. If the reservation is successful, return a success message.2. If the reservation fails, return a corresponding error message.', 'input_parameters': {'meeting_topic': {'type': 'str', 'description': 'The title of the meeting, no more than 50 characters.'}, 'start_time': {'type': 'str', 'description': 'The start time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'end_time': {'type': 'str', 'description': 'The end time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location where the meeting to be held, no more than 100 characters.'}, 'attendees': {'type': 'list(str)', 'description': 'The attendees of the meeting, including names, positions and other information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AddMeeting(meeting_topic='Team Meeting', start_time='2023-06-08 14:00:00', end_time='2023-06-08 15:00:00', location='Conference Room A', attendees='['Mary', 'Peter']')]",
        "sample_id": 10,
        "api_id": 7
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='OrganizationMembers')]",
        "sample_id": 11,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [OrganizationMembers(organization='Tencent')]",
        "sample_id": 11,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Tencent')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Tencent'}, 'output': {'members': ['Tom', 'Jerry']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TravelStatus')]",
        "sample_id": 11,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Tencent')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Tencent'}, 'output': {'members': ['Tom', 'Jerry']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Tom')]",
        "sample_id": 11,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Tencent')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Tencent'}, 'output': {'members': ['Tom', 'Jerry']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Tom')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Tom'}, 'output': 'Traveling', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Jerry')]",
        "sample_id": 11,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Tencent')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Tencent'}, 'output': {'members': ['Tom', 'Jerry']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Tom')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Tom'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jerry')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jerry'}, 'output': 'Working from home', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AddMeeting')]",
        "sample_id": 11,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Tencent who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Tencent')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Tencent'}, 'output': {'members': ['Tom', 'Jerry']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Tom')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Tom'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jerry')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jerry'}, 'output': 'Working from home', 'exception': None}\nAPI-Request: [ToolSearcher(keywords='AddMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AddMeeting'}, 'output': {'name': 'AddMeeting', 'description': 'This API allows users to make a reservation for a meeting and store the meeting information in the database.Function\uff1aAllow users to make a reservation for a meeting.Exception Handling\uff1a1. If the reservation is successful, return a success message.2. If the reservation fails, return a corresponding error message.', 'input_parameters': {'meeting_topic': {'type': 'str', 'description': 'The title of the meeting, no more than 50 characters.'}, 'start_time': {'type': 'str', 'description': 'The start time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'end_time': {'type': 'str', 'description': 'The end time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location where the meeting to be held, no more than 100 characters.'}, 'attendees': {'type': 'list(str)', 'description': 'The attendees of the meeting, including names, positions and other information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AddMeeting(meeting_topic='Team Meeting', start_time='2023-06-08 14:00:00', end_time='2023-06-08 15:00:00', location='Conference Room A', attendees='['Jerry']')]",
        "sample_id": 11,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='OrganizationMembers')]",
        "sample_id": 12,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [OrganizationMembers(organization='Baidu')]",
        "sample_id": 12,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Baidu')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Baidu'}, 'output': {'members': ['Jack', 'Rose']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TravelStatus')]",
        "sample_id": 12,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Baidu')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Baidu'}, 'output': {'members': ['Jack', 'Rose']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Jack')]",
        "sample_id": 12,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Baidu')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Baidu'}, 'output': {'members': ['Jack', 'Rose']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jack')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jack'}, 'output': 'Working from office', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Rose')]",
        "sample_id": 12,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Baidu')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Baidu'}, 'output': {'members': ['Jack', 'Rose']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jack')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jack'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Rose')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Rose'}, 'output': 'Working from office', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AddMeeting')]",
        "sample_id": 12,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the Baidu who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='Baidu')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'Baidu'}, 'output': {'members': ['Jack', 'Rose']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jack')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jack'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Rose')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Rose'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [ToolSearcher(keywords='AddMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AddMeeting'}, 'output': {'name': 'AddMeeting', 'description': 'This API allows users to make a reservation for a meeting and store the meeting information in the database.Function\uff1aAllow users to make a reservation for a meeting.Exception Handling\uff1a1. If the reservation is successful, return a success message.2. If the reservation fails, return a corresponding error message.', 'input_parameters': {'meeting_topic': {'type': 'str', 'description': 'The title of the meeting, no more than 50 characters.'}, 'start_time': {'type': 'str', 'description': 'The start time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'end_time': {'type': 'str', 'description': 'The end time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location where the meeting to be held, no more than 100 characters.'}, 'attendees': {'type': 'list(str)', 'description': 'The attendees of the meeting, including names, positions and other information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AddMeeting(meeting_topic='Team Meeting', start_time='2023-06-08 14:00:00', end_time='2023-06-08 15:00:00', location='Conference Room A', attendees='['Jack', 'Rose']')]",
        "sample_id": 12,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='OrganizationMembers')]",
        "sample_id": 13,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [OrganizationMembers(organization='ByteDance')]",
        "sample_id": 13,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='ByteDance')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'ByteDance'}, 'output': {'members': ['Bob', 'Alice']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TravelStatus')]",
        "sample_id": 13,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='ByteDance')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'ByteDance'}, 'output': {'members': ['Bob', 'Alice']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Bob')]",
        "sample_id": 13,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='ByteDance')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'ByteDance'}, 'output': {'members': ['Bob', 'Alice']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Bob')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Bob'}, 'output': 'Traveling', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Alice')]",
        "sample_id": 13,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='ByteDance')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'ByteDance'}, 'output': {'members': ['Bob', 'Alice']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Bob')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Bob'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Alice')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Alice'}, 'output': 'Working from home', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AddMeeting')]",
        "sample_id": 13,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the ByteDance who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='ByteDance')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'ByteDance'}, 'output': {'members': ['Bob', 'Alice']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Bob')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Bob'}, 'output': 'Traveling', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Alice')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Alice'}, 'output': 'Working from home', 'exception': None}\nAPI-Request: [ToolSearcher(keywords='AddMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AddMeeting'}, 'output': {'name': 'AddMeeting', 'description': 'This API allows users to make a reservation for a meeting and store the meeting information in the database.Function\uff1aAllow users to make a reservation for a meeting.Exception Handling\uff1a1. If the reservation is successful, return a success message.2. If the reservation fails, return a corresponding error message.', 'input_parameters': {'meeting_topic': {'type': 'str', 'description': 'The title of the meeting, no more than 50 characters.'}, 'start_time': {'type': 'str', 'description': 'The start time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'end_time': {'type': 'str', 'description': 'The end time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location where the meeting to be held, no more than 100 characters.'}, 'attendees': {'type': 'list(str)', 'description': 'The attendees of the meeting, including names, positions and other information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AddMeeting(meeting_topic='Team Meeting', start_time='2023-06-08 14:00:00', end_time='2023-06-08 15:00:00', location='Conference Room A', attendees='['Alice']')]",
        "sample_id": 13,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='OrganizationMembers')]",
        "sample_id": 14,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [OrganizationMembers(organization='JD')]",
        "sample_id": 14,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='JD')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'JD'}, 'output': {'members': ['Mike', 'Jane']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TravelStatus')]",
        "sample_id": 14,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='JD')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'JD'}, 'output': {'members': ['Mike', 'Jane']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Mike')]",
        "sample_id": 14,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='JD')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'JD'}, 'output': {'members': ['Mike', 'Jane']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Mike')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Mike'}, 'output': 'Working from office', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TravelStatus(member_name='Jane')]",
        "sample_id": 14,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='JD')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'JD'}, 'output': {'members': ['Mike', 'Jane']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Mike')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Mike'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jane')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jane'}, 'output': 'Working from office', 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AddMeeting')]",
        "sample_id": 14,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Book a meeting for me, including all employees in the JD who are not traveling. Today is 2023.6.8, the meeting is from 14:00 to 15:00.\nAPI-Request: [ToolSearcher(keywords='OrganizationMembers')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'OrganizationMembers'}, 'output': {'name': 'OrganizationMembers', 'description': 'API to retrieve the list of members in the organization.', 'input_parameters': {'organization': {'type': 'str', 'description': 'Name of the organization.'}}, 'output_parameters': {'members': {'type': 'list', 'description': 'List of organization members.'}}}, 'exception': None}\nAPI-Request: [OrganizationMembers(organization='JD')]->{'api_name': 'OrganizationMembers', 'input': {'organization': 'JD'}, 'output': {'members': ['Mike', 'Jane']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TravelStatus')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TravelStatus'}, 'output': {'name': 'TravelStatus', 'description': 'API for retrieving the current travel status of each member.', 'input_parameters': {'member_name': {'type': 'str', 'description': 'Name of the member.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Travel status'}}}, 'exception': None}\nAPI-Request: [TravelStatus(member_name='Mike')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Mike'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [TravelStatus(member_name='Jane')]->{'api_name': 'TravelStatus', 'input': {'member_name': 'Jane'}, 'output': 'Working from office', 'exception': None}\nAPI-Request: [ToolSearcher(keywords='AddMeeting')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AddMeeting'}, 'output': {'name': 'AddMeeting', 'description': 'This API allows users to make a reservation for a meeting and store the meeting information in the database.Function\uff1aAllow users to make a reservation for a meeting.Exception Handling\uff1a1. If the reservation is successful, return a success message.2. If the reservation fails, return a corresponding error message.', 'input_parameters': {'meeting_topic': {'type': 'str', 'description': 'The title of the meeting, no more than 50 characters.'}, 'start_time': {'type': 'str', 'description': 'The start time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'end_time': {'type': 'str', 'description': 'The end time of the meeting, in the pattern of %Y-%m-%d %H:%M:%S'}, 'location': {'type': 'str', 'description': 'The location where the meeting to be held, no more than 100 characters.'}, 'attendees': {'type': 'list(str)', 'description': 'The attendees of the meeting, including names, positions and other information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AddMeeting(meeting_topic='Team Meeting', start_time='2023-06-08 14:00:00', end_time='2023-06-08 15:00:00', location='Conference Room A', attendees='['Mike', 'Jane']')]",
        "sample_id": 14,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of New York City.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 15,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of New York City.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='New York City')]",
        "sample_id": 15,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of New York City.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='New York City')]->{'api_name': 'Geocoding', 'input': {'address': 'New York City'}, 'output': {'latitude': 40.7128, 'longitude': 74.006}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='NearbyRestaurants')]",
        "sample_id": 15,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of New York City.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='New York City')]->{'api_name': 'Geocoding', 'input': {'address': 'New York City'}, 'output': {'latitude': 40.7128, 'longitude': 74.006}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='NearbyRestaurants')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'NearbyRestaurants'}, 'output': {'name': 'NearbyRestaurants', 'description': 'Retrieves nearby restaurants based on the provided coordinates and search parameters.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}, 'distance': {'type': 'int', 'description': 'The distance in meters from the location to search for restaurants.'}}, 'output_parameters': {'restaurants': {'type': 'list', 'description': 'A list of nearby restaurants.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [NearbyRestaurants(latitude='40.7128', longitude='74.0060', distance='1000')]",
        "sample_id": 15,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of San Francisco.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 16,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of San Francisco.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='San Francisco')]",
        "sample_id": 16,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of San Francisco.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='San Francisco')]->{'api_name': 'Geocoding', 'input': {'address': 'San Francisco'}, 'output': {'latitude': 37.7749, 'longitude': 122.4194}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='NearbyRestaurants')]",
        "sample_id": 16,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of San Francisco.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='San Francisco')]->{'api_name': 'Geocoding', 'input': {'address': 'San Francisco'}, 'output': {'latitude': 37.7749, 'longitude': 122.4194}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='NearbyRestaurants')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'NearbyRestaurants'}, 'output': {'name': 'NearbyRestaurants', 'description': 'Retrieves nearby restaurants based on the provided coordinates and search parameters.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}, 'distance': {'type': 'int', 'description': 'The distance in meters from the location to search for restaurants.'}}, 'output_parameters': {'restaurants': {'type': 'list', 'description': 'A list of nearby restaurants.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [NearbyRestaurants(latitude='37.7749', longitude='122.4194', distance='1000')]",
        "sample_id": 16,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of London.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 17,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of London.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='London')]",
        "sample_id": 17,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of London.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='London')]->{'api_name': 'Geocoding', 'input': {'address': 'London'}, 'output': {'latitude': 51.5074, 'longitude': 0.1278}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='NearbyRestaurants')]",
        "sample_id": 17,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of London.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='London')]->{'api_name': 'Geocoding', 'input': {'address': 'London'}, 'output': {'latitude': 51.5074, 'longitude': 0.1278}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='NearbyRestaurants')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'NearbyRestaurants'}, 'output': {'name': 'NearbyRestaurants', 'description': 'Retrieves nearby restaurants based on the provided coordinates and search parameters.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}, 'distance': {'type': 'int', 'description': 'The distance in meters from the location to search for restaurants.'}}, 'output_parameters': {'restaurants': {'type': 'list', 'description': 'A list of nearby restaurants.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [NearbyRestaurants(latitude='51.5074', longitude='0.1278', distance='1000')]",
        "sample_id": 17,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Paris.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 18,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Paris.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='Paris')]",
        "sample_id": 18,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Paris.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Paris')]->{'api_name': 'Geocoding', 'input': {'address': 'Paris'}, 'output': {'latitude': 48.8566, 'longitude': 2.3522}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='NearbyRestaurants')]",
        "sample_id": 18,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Paris.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Paris')]->{'api_name': 'Geocoding', 'input': {'address': 'Paris'}, 'output': {'latitude': 48.8566, 'longitude': 2.3522}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='NearbyRestaurants')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'NearbyRestaurants'}, 'output': {'name': 'NearbyRestaurants', 'description': 'Retrieves nearby restaurants based on the provided coordinates and search parameters.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}, 'distance': {'type': 'int', 'description': 'The distance in meters from the location to search for restaurants.'}}, 'output_parameters': {'restaurants': {'type': 'list', 'description': 'A list of nearby restaurants.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [NearbyRestaurants(latitude='48.8566', longitude='2.3522', distance='1000')]",
        "sample_id": 18,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Tokyo.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 19,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Tokyo.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='Tokyo')]",
        "sample_id": 19,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Tokyo.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Tokyo')]->{'api_name': 'Geocoding', 'input': {'address': 'Tokyo'}, 'output': {'latitude': 35.6762, 'longitude': 139.6503}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='NearbyRestaurants')]",
        "sample_id": 19,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Find nearby restaurants within 1km of Tokyo.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Tokyo')]->{'api_name': 'Geocoding', 'input': {'address': 'Tokyo'}, 'output': {'latitude': 35.6762, 'longitude': 139.6503}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='NearbyRestaurants')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'NearbyRestaurants'}, 'output': {'name': 'NearbyRestaurants', 'description': 'Retrieves nearby restaurants based on the provided coordinates and search parameters.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}, 'distance': {'type': 'int', 'description': 'The distance in meters from the location to search for restaurants.'}}, 'output_parameters': {'restaurants': {'type': 'list', 'description': 'A list of nearby restaurants.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [NearbyRestaurants(latitude='35.6762', longitude='139.6503', distance='1000')]",
        "sample_id": 19,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on John's preferences and filter out the movies that the user has already watched.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserMoviePreferences')]",
        "sample_id": 20,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on John's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserMoviePreferences(user_name='John')]",
        "sample_id": 20,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on John's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='John')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'John'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserWatchedMovies')]",
        "sample_id": 20,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on John's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='John')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'John'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserWatchedMovies(user_name='John')]",
        "sample_id": 20,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on John's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='John')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'John'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='John')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'John'}, 'output': ['The Matrix', 'The Lord of the Rings', 'The Dark Knight'], 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='MovieRecommendations')]",
        "sample_id": 20,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on John's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='John')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'John'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='John')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'John'}, 'output': ['The Matrix', 'The Lord of the Rings', 'The Dark Knight'], 'exception': None}\nAPI-Request: [ToolSearcher(keywords='MovieRecommendations')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'MovieRecommendations'}, 'output': {'name': 'MovieRecommendations', 'description': 'The API for retrieving recommended movies based on user preferences and filtering watched movies.', 'input_parameters': {'preferences': {'type': 'list', 'description': \"User's movie preferences.\"}}, 'output_parameters': {'recommended_movies': {'type': 'list', 'description': 'List of recommended movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [MovieRecommendations(preferences='['Action', 'Comedy', 'Drama']')]",
        "sample_id": 20,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Mary's preferences and filter out the movies that the user has already watched.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserMoviePreferences')]",
        "sample_id": 21,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Mary's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserMoviePreferences(user_name='Mary')]",
        "sample_id": 21,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Mary's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Mary')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Mary'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserWatchedMovies')]",
        "sample_id": 21,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Mary's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Mary')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Mary'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserWatchedMovies(user_name='Mary')]",
        "sample_id": 21,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Mary's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Mary')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Mary'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Mary')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Mary'}, 'output': ['The Lord of the Rings', 'The Dark Knight', 'The Matrix'], 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='MovieRecommendations')]",
        "sample_id": 21,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Mary's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Mary')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Mary'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Mary')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Mary'}, 'output': ['The Lord of the Rings', 'The Dark Knight', 'The Matrix'], 'exception': None}\nAPI-Request: [ToolSearcher(keywords='MovieRecommendations')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'MovieRecommendations'}, 'output': {'name': 'MovieRecommendations', 'description': 'The API for retrieving recommended movies based on user preferences and filtering watched movies.', 'input_parameters': {'preferences': {'type': 'list', 'description': \"User's movie preferences.\"}}, 'output_parameters': {'recommended_movies': {'type': 'list', 'description': 'List of recommended movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [MovieRecommendations(preferences='['Comedy', 'Drama', 'Romance']')]",
        "sample_id": 21,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Peter's preferences and filter out the movies that the user has already watched.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserMoviePreferences')]",
        "sample_id": 22,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Peter's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserMoviePreferences(user_name='Peter')]",
        "sample_id": 22,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Peter's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Peter')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Peter'}, 'output': {'preferences': ['Action', 'Drama', 'Thriller']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserWatchedMovies')]",
        "sample_id": 22,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Peter's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Peter')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Peter'}, 'output': {'preferences': ['Action', 'Drama', 'Thriller']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserWatchedMovies(user_name='Peter')]",
        "sample_id": 22,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Peter's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Peter')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Peter'}, 'output': {'preferences': ['Action', 'Drama', 'Thriller']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Peter')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Peter'}, 'output': ['The Matrix', 'The Lord of the Rings', 'The Dark Knight'], 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='MovieRecommendations')]",
        "sample_id": 22,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Peter's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Peter')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Peter'}, 'output': {'preferences': ['Action', 'Drama', 'Thriller']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Peter')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Peter'}, 'output': ['The Matrix', 'The Lord of the Rings', 'The Dark Knight'], 'exception': None}\nAPI-Request: [ToolSearcher(keywords='MovieRecommendations')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'MovieRecommendations'}, 'output': {'name': 'MovieRecommendations', 'description': 'The API for retrieving recommended movies based on user preferences and filtering watched movies.', 'input_parameters': {'preferences': {'type': 'list', 'description': \"User's movie preferences.\"}}, 'output_parameters': {'recommended_movies': {'type': 'list', 'description': 'List of recommended movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [MovieRecommendations(preferences='['Action', 'Drama', 'Thriller']')]",
        "sample_id": 22,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Tom's preferences and filter out the movies that the user has already watched.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserMoviePreferences')]",
        "sample_id": 23,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Tom's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserMoviePreferences(user_name='Tom')]",
        "sample_id": 23,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Tom's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Tom')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Tom'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserWatchedMovies')]",
        "sample_id": 23,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Tom's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Tom')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Tom'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserWatchedMovies(user_name='Tom')]",
        "sample_id": 23,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Tom's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Tom')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Tom'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Tom')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Tom'}, 'output': ['The Lord of the Rings', 'The Dark Knight', 'The Matrix'], 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='MovieRecommendations')]",
        "sample_id": 23,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Tom's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Tom')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Tom'}, 'output': {'preferences': ['Action', 'Comedy', 'Drama']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Tom')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Tom'}, 'output': ['The Lord of the Rings', 'The Dark Knight', 'The Matrix'], 'exception': None}\nAPI-Request: [ToolSearcher(keywords='MovieRecommendations')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'MovieRecommendations'}, 'output': {'name': 'MovieRecommendations', 'description': 'The API for retrieving recommended movies based on user preferences and filtering watched movies.', 'input_parameters': {'preferences': {'type': 'list', 'description': \"User's movie preferences.\"}}, 'output_parameters': {'recommended_movies': {'type': 'list', 'description': 'List of recommended movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [MovieRecommendations(preferences='['Action', 'Comedy', 'Drama']')]",
        "sample_id": 23,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Jerry's preferences and filter out the movies that the user has already watched.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserMoviePreferences')]",
        "sample_id": 24,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Jerry's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserMoviePreferences(user_name='Jerry')]",
        "sample_id": 24,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Jerry's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Jerry')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Jerry'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserWatchedMovies')]",
        "sample_id": 24,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Jerry's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Jerry')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Jerry'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserWatchedMovies(user_name='Jerry')]",
        "sample_id": 24,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Jerry's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Jerry')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Jerry'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Jerry')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Jerry'}, 'output': ['The Matrix', 'The Lord of the Rings', 'The Dark Knight'], 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='MovieRecommendations')]",
        "sample_id": 24,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve a list of recommended movies based on Jerry's preferences and filter out the movies that the user has already watched.\nAPI-Request: [ToolSearcher(keywords='UserMoviePreferences')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserMoviePreferences'}, 'output': {'name': 'UserMoviePreferences', 'description': 'API for retrieving user preferences for movie recommendations.', 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'preferences': {'type': 'list', 'description': 'List of movie preferences.'}}}, 'exception': None}\nAPI-Request: [UserMoviePreferences(user_name='Jerry')]->{'api_name': 'UserMoviePreferences', 'input': {'user_name': 'Jerry'}, 'output': {'preferences': ['Comedy', 'Drama', 'Romance']}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='UserWatchedMovies')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserWatchedMovies'}, 'output': {'name': 'UserWatchedMovies', 'description': \"API for retrieving a user's watched movie list.\", 'input_parameters': {'user_name': {'type': 'str', 'description': 'Name of the user.'}}, 'output_parameters': {'watched_movies': {'type': 'list', 'description': 'List of watched movies.'}}}, 'exception': None}\nAPI-Request: [UserWatchedMovies(user_name='Jerry')]->{'api_name': 'UserWatchedMovies', 'input': {'user_name': 'Jerry'}, 'output': ['The Matrix', 'The Lord of the Rings', 'The Dark Knight'], 'exception': None}\nAPI-Request: [ToolSearcher(keywords='MovieRecommendations')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'MovieRecommendations'}, 'output': {'name': 'MovieRecommendations', 'description': 'The API for retrieving recommended movies based on user preferences and filtering watched movies.', 'input_parameters': {'preferences': {'type': 'list', 'description': \"User's movie preferences.\"}}, 'output_parameters': {'recommended_movies': {'type': 'list', 'description': 'List of recommended movies.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [MovieRecommendations(preferences='['Comedy', 'Drama', 'Romance']')]",
        "sample_id": 24,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserPosts')]",
        "sample_id": 25,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserPosts(user_id='2')]",
        "sample_id": 25,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='2')]->{'api_name': 'UserPosts', 'input': {'user_id': 2}, 'output': {'post_ids': [4, 5, 6]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='LikeCount')]",
        "sample_id": 25,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='2')]->{'api_name': 'UserPosts', 'input': {'user_id': 2}, 'output': {'post_ids': [4, 5, 6]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='4')]",
        "sample_id": 25,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='2')]->{'api_name': 'UserPosts', 'input': {'user_id': 2}, 'output': {'post_ids': [4, 5, 6]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='4')]->{'api_name': 'LikeCount', 'input': {'post_id': 4}, 'output': {'like_count': 40}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='5')]",
        "sample_id": 25,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='2')]->{'api_name': 'UserPosts', 'input': {'user_id': 2}, 'output': {'post_ids': [4, 5, 6]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='4')]->{'api_name': 'LikeCount', 'input': {'post_id': 4}, 'output': {'like_count': 40}, 'exception': None}\nAPI-Request: [LikeCount(post_id='5')]->{'api_name': 'LikeCount', 'input': {'post_id': 5}, 'output': {'like_count': 50}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='6')]",
        "sample_id": 25,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='2')]->{'api_name': 'UserPosts', 'input': {'user_id': 2}, 'output': {'post_ids': [4, 5, 6]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='4')]->{'api_name': 'LikeCount', 'input': {'post_id': 4}, 'output': {'like_count': 40}, 'exception': None}\nAPI-Request: [LikeCount(post_id='5')]->{'api_name': 'LikeCount', 'input': {'post_id': 5}, 'output': {'like_count': 50}, 'exception': None}\nAPI-Request: [LikeCount(post_id='6')]->{'api_name': 'LikeCount', 'input': {'post_id': 6}, 'output': {'like_count': 60}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Calculator')]",
        "sample_id": 25,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 2 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='2')]->{'api_name': 'UserPosts', 'input': {'user_id': 2}, 'output': {'post_ids': [4, 5, 6]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='4')]->{'api_name': 'LikeCount', 'input': {'post_id': 4}, 'output': {'like_count': 40}, 'exception': None}\nAPI-Request: [LikeCount(post_id='5')]->{'api_name': 'LikeCount', 'input': {'post_id': 5}, 'output': {'like_count': 50}, 'exception': None}\nAPI-Request: [LikeCount(post_id='6')]->{'api_name': 'LikeCount', 'input': {'post_id': 6}, 'output': {'like_count': 60}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='Calculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Calculator'}, 'output': {'name': 'Calculator', 'description': 'This API provides basic arithmetic operations: addition, subtraction, multiplication, and division.', 'input_parameters': {'formula': {'type': 'str', 'description': \"The formula that needs to be calculated. Only integers are supported. Valid operators are +, -, *, /, and (, ). For example, '(1 + 2) * 3'.\"}}, 'output_parameters': {'result': {'type': 'float', 'description': 'The result of the formula.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Calculator(formula='40+50+60')]",
        "sample_id": 25,
        "api_id": 7
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserPosts')]",
        "sample_id": 26,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserPosts(user_id='1')]",
        "sample_id": 26,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='1')]->{'api_name': 'UserPosts', 'input': {'user_id': 1}, 'output': {'post_ids': [1, 2, 3]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='LikeCount')]",
        "sample_id": 26,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='1')]->{'api_name': 'UserPosts', 'input': {'user_id': 1}, 'output': {'post_ids': [1, 2, 3]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='1')]",
        "sample_id": 26,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='1')]->{'api_name': 'UserPosts', 'input': {'user_id': 1}, 'output': {'post_ids': [1, 2, 3]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='1')]->{'api_name': 'LikeCount', 'input': {'post_id': 1}, 'output': {'like_count': 10}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='2')]",
        "sample_id": 26,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='1')]->{'api_name': 'UserPosts', 'input': {'user_id': 1}, 'output': {'post_ids': [1, 2, 3]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='1')]->{'api_name': 'LikeCount', 'input': {'post_id': 1}, 'output': {'like_count': 10}, 'exception': None}\nAPI-Request: [LikeCount(post_id='2')]->{'api_name': 'LikeCount', 'input': {'post_id': 2}, 'output': {'like_count': 20}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='3')]",
        "sample_id": 26,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='1')]->{'api_name': 'UserPosts', 'input': {'user_id': 1}, 'output': {'post_ids': [1, 2, 3]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='1')]->{'api_name': 'LikeCount', 'input': {'post_id': 1}, 'output': {'like_count': 10}, 'exception': None}\nAPI-Request: [LikeCount(post_id='2')]->{'api_name': 'LikeCount', 'input': {'post_id': 2}, 'output': {'like_count': 20}, 'exception': None}\nAPI-Request: [LikeCount(post_id='3')]->{'api_name': 'LikeCount', 'input': {'post_id': 3}, 'output': {'like_count': 30}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Calculator')]",
        "sample_id": 26,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 1 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='1')]->{'api_name': 'UserPosts', 'input': {'user_id': 1}, 'output': {'post_ids': [1, 2, 3]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='1')]->{'api_name': 'LikeCount', 'input': {'post_id': 1}, 'output': {'like_count': 10}, 'exception': None}\nAPI-Request: [LikeCount(post_id='2')]->{'api_name': 'LikeCount', 'input': {'post_id': 2}, 'output': {'like_count': 20}, 'exception': None}\nAPI-Request: [LikeCount(post_id='3')]->{'api_name': 'LikeCount', 'input': {'post_id': 3}, 'output': {'like_count': 30}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='Calculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Calculator'}, 'output': {'name': 'Calculator', 'description': 'This API provides basic arithmetic operations: addition, subtraction, multiplication, and division.', 'input_parameters': {'formula': {'type': 'str', 'description': \"The formula that needs to be calculated. Only integers are supported. Valid operators are +, -, *, /, and (, ). For example, '(1 + 2) * 3'.\"}}, 'output_parameters': {'result': {'type': 'float', 'description': 'The result of the formula.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Calculator(formula='(10+20+30)')]",
        "sample_id": 26,
        "api_id": 7
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserPosts')]",
        "sample_id": 27,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserPosts(user_id='3')]",
        "sample_id": 27,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='3')]->{'api_name': 'UserPosts', 'input': {'user_id': 3}, 'output': {'post_ids': [7, 8, 9]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='LikeCount')]",
        "sample_id": 27,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='3')]->{'api_name': 'UserPosts', 'input': {'user_id': 3}, 'output': {'post_ids': [7, 8, 9]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='7')]",
        "sample_id": 27,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='3')]->{'api_name': 'UserPosts', 'input': {'user_id': 3}, 'output': {'post_ids': [7, 8, 9]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='7')]->{'api_name': 'LikeCount', 'input': {'post_id': 7}, 'output': {'like_count': 70}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='8')]",
        "sample_id": 27,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='3')]->{'api_name': 'UserPosts', 'input': {'user_id': 3}, 'output': {'post_ids': [7, 8, 9]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='7')]->{'api_name': 'LikeCount', 'input': {'post_id': 7}, 'output': {'like_count': 70}, 'exception': None}\nAPI-Request: [LikeCount(post_id='8')]->{'api_name': 'LikeCount', 'input': {'post_id': 8}, 'output': {'like_count': 80}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='9')]",
        "sample_id": 27,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='3')]->{'api_name': 'UserPosts', 'input': {'user_id': 3}, 'output': {'post_ids': [7, 8, 9]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='7')]->{'api_name': 'LikeCount', 'input': {'post_id': 7}, 'output': {'like_count': 70}, 'exception': None}\nAPI-Request: [LikeCount(post_id='8')]->{'api_name': 'LikeCount', 'input': {'post_id': 8}, 'output': {'like_count': 80}, 'exception': None}\nAPI-Request: [LikeCount(post_id='9')]->{'api_name': 'LikeCount', 'input': {'post_id': 9}, 'output': {'like_count': 90}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Calculator')]",
        "sample_id": 27,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 3 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='3')]->{'api_name': 'UserPosts', 'input': {'user_id': 3}, 'output': {'post_ids': [7, 8, 9]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='7')]->{'api_name': 'LikeCount', 'input': {'post_id': 7}, 'output': {'like_count': 70}, 'exception': None}\nAPI-Request: [LikeCount(post_id='8')]->{'api_name': 'LikeCount', 'input': {'post_id': 8}, 'output': {'like_count': 80}, 'exception': None}\nAPI-Request: [LikeCount(post_id='9')]->{'api_name': 'LikeCount', 'input': {'post_id': 9}, 'output': {'like_count': 90}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='Calculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Calculator'}, 'output': {'name': 'Calculator', 'description': 'This API provides basic arithmetic operations: addition, subtraction, multiplication, and division.', 'input_parameters': {'formula': {'type': 'str', 'description': \"The formula that needs to be calculated. Only integers are supported. Valid operators are +, -, *, /, and (, ). For example, '(1 + 2) * 3'.\"}}, 'output_parameters': {'result': {'type': 'float', 'description': 'The result of the formula.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Calculator(formula='30 / 3')]",
        "sample_id": 27,
        "api_id": 7
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 4 on a social media platform.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserPosts')]",
        "sample_id": 28,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 4 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserPosts(user_id='4')]",
        "sample_id": 28,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 4 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='4')]->{'api_name': 'UserPosts', 'input': {'user_id': 4}, 'output': {'post_ids': [10, 11, 12]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='LikeCount')]",
        "sample_id": 28,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 4 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='4')]->{'api_name': 'UserPosts', 'input': {'user_id': 4}, 'output': {'post_ids': [10, 11, 12]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='10')]",
        "sample_id": 28,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 4 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='4')]->{'api_name': 'UserPosts', 'input': {'user_id': 4}, 'output': {'post_ids': [10, 11, 12]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='10')]->{'api_name': 'LikeCount', 'input': {'post_id': 10}, 'output': {'like_count': 100}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='11')]",
        "sample_id": 28,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 4 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='4')]->{'api_name': 'UserPosts', 'input': {'user_id': 4}, 'output': {'post_ids': [10, 11, 12]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='10')]->{'api_name': 'LikeCount', 'input': {'post_id': 10}, 'output': {'like_count': 100}, 'exception': None}\nAPI-Request: [LikeCount(post_id='11')]->{'api_name': 'LikeCount', 'input': {'post_id': 11}, 'output': {'like_count': 110}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='12')]",
        "sample_id": 28,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='UserPosts')]",
        "sample_id": 29,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [UserPosts(user_id='5')]",
        "sample_id": 29,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='5')]->{'api_name': 'UserPosts', 'input': {'user_id': 5}, 'output': {'post_ids': [13, 14, 15]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='LikeCount')]",
        "sample_id": 29,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='5')]->{'api_name': 'UserPosts', 'input': {'user_id': 5}, 'output': {'post_ids': [13, 14, 15]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='13')]",
        "sample_id": 29,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='5')]->{'api_name': 'UserPosts', 'input': {'user_id': 5}, 'output': {'post_ids': [13, 14, 15]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='13')]->{'api_name': 'LikeCount', 'input': {'post_id': 13}, 'output': {'like_count': 130}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='14')]",
        "sample_id": 29,
        "api_id": 4
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='5')]->{'api_name': 'UserPosts', 'input': {'user_id': 5}, 'output': {'post_ids': [13, 14, 15]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='13')]->{'api_name': 'LikeCount', 'input': {'post_id': 13}, 'output': {'like_count': 130}, 'exception': None}\nAPI-Request: [LikeCount(post_id='14')]->{'api_name': 'LikeCount', 'input': {'post_id': 14}, 'output': {'like_count': 140}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [LikeCount(post_id='15')]",
        "sample_id": 29,
        "api_id": 5
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='5')]->{'api_name': 'UserPosts', 'input': {'user_id': 5}, 'output': {'post_ids': [13, 14, 15]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='13')]->{'api_name': 'LikeCount', 'input': {'post_id': 13}, 'output': {'like_count': 130}, 'exception': None}\nAPI-Request: [LikeCount(post_id='14')]->{'api_name': 'LikeCount', 'input': {'post_id': 14}, 'output': {'like_count': 140}, 'exception': None}\nAPI-Request: [LikeCount(post_id='15')]->{'api_name': 'LikeCount', 'input': {'post_id': 15}, 'output': {'like_count': 150}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Calculator')]",
        "sample_id": 29,
        "api_id": 6
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve the total number of likes for a specific user ID 5 on a social media platform.\nAPI-Request: [ToolSearcher(keywords='UserPosts')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'UserPosts'}, 'output': {'name': 'UserPosts', 'description': 'API to retrieve the post IDs for a specific user.', 'input_parameters': {'user_id': {'type': 'int', 'description': \"User's ID.\"}}, 'output_parameters': {'post_ids': {'type': 'list', 'description': 'List of post IDs.'}}}, 'exception': None}\nAPI-Request: [UserPosts(user_id='5')]->{'api_name': 'UserPosts', 'input': {'user_id': 5}, 'output': {'post_ids': [13, 14, 15]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='LikeCount')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'LikeCount'}, 'output': {'name': 'LikeCount', 'description': 'API to retrieve the number of likes for a given post ID.', 'input_parameters': {'post_id': {'type': 'int', 'description': 'Post ID.'}}, 'output_parameters': {'like_count': {'type': 'int', 'description': 'Number of likes for the post.'}}}, 'exception': None}\nAPI-Request: [LikeCount(post_id='13')]->{'api_name': 'LikeCount', 'input': {'post_id': 13}, 'output': {'like_count': 130}, 'exception': None}\nAPI-Request: [LikeCount(post_id='14')]->{'api_name': 'LikeCount', 'input': {'post_id': 14}, 'output': {'like_count': 140}, 'exception': None}\nAPI-Request: [LikeCount(post_id='15')]->{'api_name': 'LikeCount', 'input': {'post_id': 15}, 'output': {'like_count': 150}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='Calculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Calculator'}, 'output': {'name': 'Calculator', 'description': 'This API provides basic arithmetic operations: addition, subtraction, multiplication, and division.', 'input_parameters': {'formula': {'type': 'str', 'description': \"The formula that needs to be calculated. Only integers are supported. Valid operators are +, -, *, /, and (, ). For example, '(1 + 2) * 3'.\"}}, 'output_parameters': {'result': {'type': 'float', 'description': 'The result of the formula.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Calculator(formula='130+140+150')]",
        "sample_id": 29,
        "api_id": 7
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in New York City.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 30,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in New York City.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='New York City')]",
        "sample_id": 30,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in New York City.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='New York City')]->{'api_name': 'Geocoding', 'input': {'address': 'New York City'}, 'output': {'latitude': 40.7128, 'longitude': 74.006}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 30,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in New York City.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='New York City')]->{'api_name': 'Geocoding', 'input': {'address': 'New York City'}, 'output': {'latitude': 40.7128, 'longitude': 74.006}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='40.7128', longitude='74.0060')]",
        "sample_id": 30,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in San Francisco.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 31,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in San Francisco.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='San Francisco')]",
        "sample_id": 31,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in San Francisco.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='San Francisco')]->{'api_name': 'Geocoding', 'input': {'address': 'San Francisco'}, 'output': {'latitude': 37.7749, 'longitude': 122.4194}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 31,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in San Francisco.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='San Francisco')]->{'api_name': 'Geocoding', 'input': {'address': 'San Francisco'}, 'output': {'latitude': 37.7749, 'longitude': 122.4194}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='37.7749', longitude='122.4194')]",
        "sample_id": 31,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in London.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 32,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in London.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='London')]",
        "sample_id": 32,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in London.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='London')]->{'api_name': 'Geocoding', 'input': {'address': 'London'}, 'output': {'latitude': 51.5074, 'longitude': 0.1278}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 32,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in London.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='London')]->{'api_name': 'Geocoding', 'input': {'address': 'London'}, 'output': {'latitude': 51.5074, 'longitude': 0.1278}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='51.5074', longitude='0.1278')]",
        "sample_id": 32,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Paris.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 33,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Paris.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='Paris')]",
        "sample_id": 33,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Paris.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Paris')]->{'api_name': 'Geocoding', 'input': {'address': 'Paris'}, 'output': {'latitude': 48.8566, 'longitude': 2.3522}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 33,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Paris.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Paris')]->{'api_name': 'Geocoding', 'input': {'address': 'Paris'}, 'output': {'latitude': 48.8566, 'longitude': 2.3522}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='48.8566', longitude='2.3522')]",
        "sample_id": 33,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Tokyo.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='Geocoding')]",
        "sample_id": 34,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Tokyo.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [Geocoding(address='Tokyo')]",
        "sample_id": 34,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Tokyo.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Tokyo')]->{'api_name': 'Geocoding', 'input': {'address': 'Tokyo'}, 'output': {'latitude': 35.6762, 'longitude': 139.6503}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]",
        "sample_id": 34,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Check the current weather conditions in Tokyo.\nAPI-Request: [ToolSearcher(keywords='Geocoding')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'Geocoding'}, 'output': {'name': 'Geocoding', 'description': 'The API for converting an address or place name to geographical coordinates.', 'input_parameters': {'address': {'type': 'str', 'description': 'The address or place name to be converted.'}}, 'output_parameters': {'latitude': {'type': 'float', 'description': 'The latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'The longitude of the location.'}}}, 'exception': None}\nAPI-Request: [Geocoding(address='Tokyo')]->{'api_name': 'Geocoding', 'input': {'address': 'Tokyo'}, 'output': {'latitude': 35.6762, 'longitude': 139.6503}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='GetWeatherForCoordinates')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetWeatherForCoordinates'}, 'output': {'name': 'GetWeatherForCoordinates', 'description': 'Retrieves current weather information based on the provided coordinates.', 'input_parameters': {'latitude': {'type': 'float', 'description': 'Latitude of the location.'}, 'longitude': {'type': 'float', 'description': 'Longitude of the location.'}}, 'output_parameters': {'temperature': {'type': 'float', 'description': 'Current temperature in Celsius.'}, 'humidity': {'type': 'float', 'description': 'Current humidity level.'}, 'description': {'type': 'str', 'description': 'Weather description.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetWeatherForCoordinates(latitude='35.6762', longitude='139.6503')]",
        "sample_id": 34,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for a given destination and travel dates.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='FlightSearch')]",
        "sample_id": 35,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for a given destination and travel dates.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [FlightSearch(source='New York', destination='San Francisco', travel_dates='2022-01-01')]",
        "sample_id": 35,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for a given destination and travel dates.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='New York', destination='San Francisco', travel_dates='2022-01-01')]->{'api_name': 'FlightSearch', 'input': {'source': 'New York', 'destination': 'San Francisco', 'travel_dates': '2022-01-01'}, 'output': {'flights': [{'source': 'New York', 'destination': 'San Francisco', 'departure_date': '2022-01-01 12:00:00', 'arrival_date': '2022-01-01 15:00:00'}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='HotelAvailability')]",
        "sample_id": 35,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for a given destination and travel dates.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='New York', destination='San Francisco', travel_dates='2022-01-01')]->{'api_name': 'FlightSearch', 'input': {'source': 'New York', 'destination': 'San Francisco', 'travel_dates': '2022-01-01'}, 'output': {'flights': [{'source': 'New York', 'destination': 'San Francisco', 'departure_date': '2022-01-01 12:00:00', 'arrival_date': '2022-01-01 15:00:00'}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='HotelAvailability')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'HotelAvailability'}, 'output': {'name': 'HotelAvailability', 'description': 'API for checking hotel availability based on the destination and travel dates.', 'input_parameters': {'destination': {'type': 'str', 'description': 'Destination for hotel search.'}, 'check_in_date': {'type': 'str', 'description': 'Check-in date. Format: %Y-%m-%d'}, 'check_out_date': {'type': 'str', 'description': 'Check-out date. Format: %Y-%m-%d'}}, 'output_parameters': {'hotels': {'type': 'list', 'description': 'List of available hotels.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [HotelAvailability(destination='San Francisco', check_in_date='2022-01-01', check_out_date='2022-01-02')]",
        "sample_id": 35,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for Los Angeles to San Francisco January 2nd, 2022.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='FlightSearch')]",
        "sample_id": 36,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for Los Angeles to San Francisco January 2nd, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [FlightSearch(source='Los Angeles', destination='San Francisco', travel_dates='2022-01-02')]",
        "sample_id": 36,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for Los Angeles to San Francisco January 2nd, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='Los Angeles', destination='San Francisco', travel_dates='2022-01-02')]->{'api_name': 'FlightSearch', 'input': {'source': 'Los Angeles', 'destination': 'San Francisco', 'travel_dates': '2022-01-02'}, 'output': {'flights': [{'source': 'Los Angeles', 'destination': 'San Francisco', 'departure_date': '2022-01-02 12:00:00', 'arrival_date': '2022-01-02 15:00:00'}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='HotelAvailability')]",
        "sample_id": 36,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for Los Angeles to San Francisco January 2nd, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='Los Angeles', destination='San Francisco', travel_dates='2022-01-02')]->{'api_name': 'FlightSearch', 'input': {'source': 'Los Angeles', 'destination': 'San Francisco', 'travel_dates': '2022-01-02'}, 'output': {'flights': [{'source': 'Los Angeles', 'destination': 'San Francisco', 'departure_date': '2022-01-02 12:00:00', 'arrival_date': '2022-01-02 15:00:00'}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='HotelAvailability')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'HotelAvailability'}, 'output': {'name': 'HotelAvailability', 'description': 'API for checking hotel availability based on the destination and travel dates.', 'input_parameters': {'destination': {'type': 'str', 'description': 'Destination for hotel search.'}, 'check_in_date': {'type': 'str', 'description': 'Check-in date. Format: %Y-%m-%d'}, 'check_out_date': {'type': 'str', 'description': 'Check-out date. Format: %Y-%m-%d'}}, 'output_parameters': {'hotels': {'type': 'list', 'description': 'List of available hotels.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [HotelAvailability(destination='San Francisco', check_in_date='2022-01-02', check_out_date='2022-01-03')]",
        "sample_id": 36,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for London to San Francisco on January 3rd, 2022.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='FlightSearch')]",
        "sample_id": 37,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for London to San Francisco on January 3rd, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [FlightSearch(source='London', destination='San Francisco', travel_dates='2022-01-03')]",
        "sample_id": 37,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for London to San Francisco on January 3rd, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='London', destination='San Francisco', travel_dates='2022-01-03')]->{'api_name': 'FlightSearch', 'input': {'source': 'London', 'destination': 'San Francisco', 'travel_dates': '2022-01-03'}, 'output': {'flights': [{'source': 'London', 'destination': 'San Francisco', 'departure_date': '2022-01-03 12:00:00', 'arrival_date': '2022-01-03 15:00:00'}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='HotelAvailability')]",
        "sample_id": 37,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for London to San Francisco on January 3rd, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='London', destination='San Francisco', travel_dates='2022-01-03')]->{'api_name': 'FlightSearch', 'input': {'source': 'London', 'destination': 'San Francisco', 'travel_dates': '2022-01-03'}, 'output': {'flights': [{'source': 'London', 'destination': 'San Francisco', 'departure_date': '2022-01-03 12:00:00', 'arrival_date': '2022-01-03 15:00:00'}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='HotelAvailability')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'HotelAvailability'}, 'output': {'name': 'HotelAvailability', 'description': 'API for checking hotel availability based on the destination and travel dates.', 'input_parameters': {'destination': {'type': 'str', 'description': 'Destination for hotel search.'}, 'check_in_date': {'type': 'str', 'description': 'Check-in date. Format: %Y-%m-%d'}, 'check_out_date': {'type': 'str', 'description': 'Check-out date. Format: %Y-%m-%d'}}, 'output_parameters': {'hotels': {'type': 'list', 'description': 'List of available hotels.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [HotelAvailability(destination='San Francisco', check_in_date='2022-01-03', check_out_date='2022-01-04')]",
        "sample_id": 37,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to London on January 4th, 2022.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='FlightSearch')]",
        "sample_id": 38,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to London on January 4th, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [FlightSearch(source='New York', destination='London', travel_dates='2022-01-04')]",
        "sample_id": 38,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to London on January 4th, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='New York', destination='London', travel_dates='2022-01-04')]->{'api_name': 'FlightSearch', 'input': {'source': 'New York', 'destination': 'London', 'travel_dates': '2022-01-04'}, 'output': {'flights': [{'source': 'New York', 'destination': 'London', 'departure_date': '2022-01-04 12:00:00', 'arrival_date': '2022-01-04 15:00:00'}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='HotelAvailability')]",
        "sample_id": 38,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to London on January 4th, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='New York', destination='London', travel_dates='2022-01-04')]->{'api_name': 'FlightSearch', 'input': {'source': 'New York', 'destination': 'London', 'travel_dates': '2022-01-04'}, 'output': {'flights': [{'source': 'New York', 'destination': 'London', 'departure_date': '2022-01-04 12:00:00', 'arrival_date': '2022-01-04 15:00:00'}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='HotelAvailability')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'HotelAvailability'}, 'output': {'name': 'HotelAvailability', 'description': 'API for checking hotel availability based on the destination and travel dates.', 'input_parameters': {'destination': {'type': 'str', 'description': 'Destination for hotel search.'}, 'check_in_date': {'type': 'str', 'description': 'Check-in date. Format: %Y-%m-%d'}, 'check_out_date': {'type': 'str', 'description': 'Check-out date. Format: %Y-%m-%d'}}, 'output_parameters': {'hotels': {'type': 'list', 'description': 'List of available hotels.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [HotelAvailability(destination='London', check_in_date='2022-01-04', check_out_date='2022-01-05')]",
        "sample_id": 38,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to Los Angeles on January 5th, 2022.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='FlightSearch')]",
        "sample_id": 39,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to Los Angeles on January 5th, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [FlightSearch(source='New York', destination='Los Angeles', travel_dates='2022-01-05')]",
        "sample_id": 39,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to Los Angeles on January 5th, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='New York', destination='Los Angeles', travel_dates='2022-01-05')]->{'api_name': 'FlightSearch', 'input': {'source': 'New York', 'destination': 'Los Angeles', 'travel_dates': '2022-01-05'}, 'output': {'flights': [{'source': 'New York', 'destination': 'Los Angeles', 'departure_date': '2022-01-05 12:00:00', 'arrival_date': '2022-01-05 15:00:00'}]}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='HotelAvailability')]",
        "sample_id": 39,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Retrieve flight options and hotel availability for New York to Los Angeles on January 5th, 2022.\nAPI-Request: [ToolSearcher(keywords='FlightSearch')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'FlightSearch'}, 'output': {'name': 'FlightSearch', 'description': 'API to retrieve flight options based on the destination and travel dates.', 'input_parameters': {'source': {'type': 'str', 'description': 'Source for the flight.'}, 'destination': {'type': 'str', 'description': 'Destination for the flight.'}, 'travel_dates': {'type': 'str', 'description': 'Travel dates. Format: %Y-%m-%d'}}, 'output_parameters': {'flights': {'type': 'list', 'description': 'List of available flight options.'}}}, 'exception': None}\nAPI-Request: [FlightSearch(source='New York', destination='Los Angeles', travel_dates='2022-01-05')]->{'api_name': 'FlightSearch', 'input': {'source': 'New York', 'destination': 'Los Angeles', 'travel_dates': '2022-01-05'}, 'output': {'flights': [{'source': 'New York', 'destination': 'Los Angeles', 'departure_date': '2022-01-05 12:00:00', 'arrival_date': '2022-01-05 15:00:00'}]}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='HotelAvailability')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'HotelAvailability'}, 'output': {'name': 'HotelAvailability', 'description': 'API for checking hotel availability based on the destination and travel dates.', 'input_parameters': {'destination': {'type': 'str', 'description': 'Destination for hotel search.'}, 'check_in_date': {'type': 'str', 'description': 'Check-in date. Format: %Y-%m-%d'}, 'check_out_date': {'type': 'str', 'description': 'Check-out date. Format: %Y-%m-%d'}}, 'output_parameters': {'hotels': {'type': 'list', 'description': 'List of available hotels.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [HotelAvailability(destination='Los Angeles', check_in_date='2022-01-05', check_out_date='2022-01-06')]",
        "sample_id": 39,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Financial Analyst\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetOccupationSalary')]",
        "sample_id": 40,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Financial Analyst\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetOccupationSalary(occupation='Financial Analyst')]",
        "sample_id": 40,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Financial Analyst\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Financial Analyst')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Financial Analyst'}, 'output': {'salary': 100000}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TaxCalculator')]",
        "sample_id": 40,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Financial Analyst\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Financial Analyst')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Financial Analyst'}, 'output': {'salary': 100000}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TaxCalculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TaxCalculator'}, 'output': {'name': 'TaxCalculator', 'description': 'API for calculating tax deductions based on the given salary.', 'input_parameters': {'salary': {'type': 'float', 'description': 'The salary to calculate tax deductions for.'}}, 'output_parameters': {'salary_after_tax': {'type': 'float', 'description': 'The salary after tax deductions.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TaxCalculator(salary='100000')]",
        "sample_id": 40,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Software Engineer\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetOccupationSalary')]",
        "sample_id": 41,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Software Engineer\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetOccupationSalary(occupation='Software Engineer')]",
        "sample_id": 41,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Software Engineer\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Software Engineer')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Software Engineer'}, 'output': {'salary': 120000}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TaxCalculator')]",
        "sample_id": 41,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Software Engineer\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Software Engineer')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Software Engineer'}, 'output': {'salary': 120000}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TaxCalculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TaxCalculator'}, 'output': {'name': 'TaxCalculator', 'description': 'API for calculating tax deductions based on the given salary.', 'input_parameters': {'salary': {'type': 'float', 'description': 'The salary to calculate tax deductions for.'}}, 'output_parameters': {'salary_after_tax': {'type': 'float', 'description': 'The salary after tax deductions.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TaxCalculator(salary='120000')]",
        "sample_id": 41,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Data Scientist\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetOccupationSalary')]",
        "sample_id": 42,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Data Scientist\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetOccupationSalary(occupation='Data Scientist')]",
        "sample_id": 42,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Data Scientist\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Data Scientist')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Data Scientist'}, 'output': {'salary': 150000}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TaxCalculator')]",
        "sample_id": 42,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Data Scientist\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Data Scientist')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Data Scientist'}, 'output': {'salary': 150000}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TaxCalculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TaxCalculator'}, 'output': {'name': 'TaxCalculator', 'description': 'API for calculating tax deductions based on the given salary.', 'input_parameters': {'salary': {'type': 'float', 'description': 'The salary to calculate tax deductions for.'}}, 'output_parameters': {'salary_after_tax': {'type': 'float', 'description': 'The salary after tax deductions.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TaxCalculator(salary='150000')]",
        "sample_id": 42,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Product Manager\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetOccupationSalary')]",
        "sample_id": 43,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Product Manager\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetOccupationSalary(occupation='Product Manager')]",
        "sample_id": 43,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Product Manager\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Product Manager')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Product Manager'}, 'output': {'salary': 130000}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TaxCalculator')]",
        "sample_id": 43,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Product Manager\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Product Manager')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Product Manager'}, 'output': {'salary': 130000}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TaxCalculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TaxCalculator'}, 'output': {'name': 'TaxCalculator', 'description': 'API for calculating tax deductions based on the given salary.', 'input_parameters': {'salary': {'type': 'float', 'description': 'The salary to calculate tax deductions for.'}}, 'output_parameters': {'salary_after_tax': {'type': 'float', 'description': 'The salary after tax deductions.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TaxCalculator(salary='130000')]",
        "sample_id": 43,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Doctor\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='GetOccupationSalary')]",
        "sample_id": 44,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Doctor\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [GetOccupationSalary(occupation='Doctor')]",
        "sample_id": 44,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Doctor\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Doctor')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Doctor'}, 'output': {'salary': 200000}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='TaxCalculator')]",
        "sample_id": 44,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Calculate the monthly salary after taxes for a Doctor\nAPI-Request: [ToolSearcher(keywords='GetOccupationSalary')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'GetOccupationSalary'}, 'output': {'name': 'GetOccupationSalary', 'description': 'API for querying the salary of a given occupation.', 'input_parameters': {'occupation': {'type': 'str', 'description': 'The occupation to query.'}}, 'output_parameters': {'salary': {'type': 'float', 'description': 'The salary of the given occupation.'}}}, 'exception': None}\nAPI-Request: [GetOccupationSalary(occupation='Doctor')]->{'api_name': 'GetOccupationSalary', 'input': {'occupation': 'Doctor'}, 'output': {'salary': 200000}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='TaxCalculator')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'TaxCalculator'}, 'output': {'name': 'TaxCalculator', 'description': 'API for calculating tax deductions based on the given salary.', 'input_parameters': {'salary': {'type': 'float', 'description': 'The salary to calculate tax deductions for.'}}, 'output_parameters': {'salary_after_tax': {'type': 'float', 'description': 'The salary after tax deductions.'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [TaxCalculator(salary='200000')]",
        "sample_id": 44,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update John's personal information and address. Password is 123456. Address is 123 Main St.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AccountInfo')]",
        "sample_id": 45,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update John's personal information and address. Password is 123456. Address is 123 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AccountInfo(username='John', password='123456')]",
        "sample_id": 45,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update John's personal information and address. Password is 123456. Address is 123 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='John', password='123456')]->{'api_name': 'AccountInfo', 'input': {'username': 'John', 'password': '123456'}, 'output': {'email': 'john@example.com', 'phone': '1234567890'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]",
        "sample_id": 45,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update John's personal information and address. Password is 123456. Address is 123 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='John', password='123456')]->{'api_name': 'AccountInfo', 'input': {'username': 'John', 'password': '123456'}, 'output': {'email': 'john@example.com', 'phone': '1234567890'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'PersonalInfoUpdate'}, 'output': {'name': 'PersonalInfoUpdate', 'description': \"The API for updating a user's personal information and address.\", 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}, 'address': {'type': 'str', 'description': 'Updated address information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Success or failure'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [PersonalInfoUpdate(username='John', password='123456', address='123 Main St')]",
        "sample_id": 45,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Mary's personal information and address. Password is abcdef. Address is 456 Main St.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AccountInfo')]",
        "sample_id": 46,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Mary's personal information and address. Password is abcdef. Address is 456 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AccountInfo(username='Mary', password='abcdef')]",
        "sample_id": 46,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Mary's personal information and address. Password is abcdef. Address is 456 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Mary', password='abcdef')]->{'api_name': 'AccountInfo', 'input': {'username': 'Mary', 'password': 'abcdef'}, 'output': {'email': 'mary@example.com', 'phone': '0987654321'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]",
        "sample_id": 46,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Mary's personal information and address. Password is abcdef. Address is 456 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Mary', password='abcdef')]->{'api_name': 'AccountInfo', 'input': {'username': 'Mary', 'password': 'abcdef'}, 'output': {'email': 'mary@example.com', 'phone': '0987654321'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'PersonalInfoUpdate'}, 'output': {'name': 'PersonalInfoUpdate', 'description': \"The API for updating a user's personal information and address.\", 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}, 'address': {'type': 'str', 'description': 'Updated address information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Success or failure'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [PersonalInfoUpdate(username='Mary', password='abcdef', address='456 Main St')]",
        "sample_id": 46,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Peter's personal information and address. Password is qwerty. Address is 789 Main St.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AccountInfo')]",
        "sample_id": 47,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Peter's personal information and address. Password is qwerty. Address is 789 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AccountInfo(username='Peter', password='qwerty')]",
        "sample_id": 47,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Peter's personal information and address. Password is qwerty. Address is 789 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Peter', password='qwerty')]->{'api_name': 'AccountInfo', 'input': {'username': 'Peter', 'password': 'qwerty'}, 'output': {'email': 'peter@example.com', 'phone': '1231231234'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]",
        "sample_id": 47,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Peter's personal information and address. Password is qwerty. Address is 789 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Peter', password='qwerty')]->{'api_name': 'AccountInfo', 'input': {'username': 'Peter', 'password': 'qwerty'}, 'output': {'email': 'peter@example.com', 'phone': '1231231234'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'PersonalInfoUpdate'}, 'output': {'name': 'PersonalInfoUpdate', 'description': \"The API for updating a user's personal information and address.\", 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}, 'address': {'type': 'str', 'description': 'Updated address information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Success or failure'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [PersonalInfoUpdate(username='Peter', password='qwerty', address='789 Main St')]",
        "sample_id": 47,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Tom's personal information and address. Password is asdfgh. Address is 012 Main St.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AccountInfo')]",
        "sample_id": 48,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Tom's personal information and address. Password is asdfgh. Address is 012 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AccountInfo(username='Tom', password='asdfgh')]",
        "sample_id": 48,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Tom's personal information and address. Password is asdfgh. Address is 012 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Tom', password='asdfgh')]->{'api_name': 'AccountInfo', 'input': {'username': 'Tom', 'password': 'asdfgh'}, 'output': {'email': 'tom@example.com', 'phone': '4564564567'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]",
        "sample_id": 48,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Tom's personal information and address. Password is asdfgh. Address is 012 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Tom', password='asdfgh')]->{'api_name': 'AccountInfo', 'input': {'username': 'Tom', 'password': 'asdfgh'}, 'output': {'email': 'tom@example.com', 'phone': '4564564567'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'PersonalInfoUpdate'}, 'output': {'name': 'PersonalInfoUpdate', 'description': \"The API for updating a user's personal information and address.\", 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}, 'address': {'type': 'str', 'description': 'Updated address information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Success or failure'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [PersonalInfoUpdate(username='Tom', password='asdfgh', address='012 Main St')]",
        "sample_id": 48,
        "api_id": 3
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Jerry's personal information and address. Password is zxcvbn. Address is 345 Main St.\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='AccountInfo')]",
        "sample_id": 49,
        "api_id": 0
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Jerry's personal information and address. Password is zxcvbn. Address is 345 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [AccountInfo(username='Jerry', password='zxcvbn')]",
        "sample_id": 49,
        "api_id": 1
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Jerry's personal information and address. Password is zxcvbn. Address is 345 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Jerry', password='zxcvbn')]->{'api_name': 'AccountInfo', 'input': {'username': 'Jerry', 'password': 'zxcvbn'}, 'output': {'email': 'jerry@example.com', 'phone': '7897897890'}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]",
        "sample_id": 49,
        "api_id": 2
    },
    {
        "instruction": "\nGenerate an API request in the format of [ApiName(key1='value1', key2='value2', ...)] based on the user's utterance and available API requests.\nInput: \nUser: User's utterence\n\nExpected output:\nAPI-Request: [ApiName(key1='value1', key2='value2', ...)]\n\nAPI descriptions:\n",
        "input": "{\"apiCode\": \"ToolSearcher\", \"description\": \"Searches for relevant tools in library based on the keywords.\", \"parameters\": {\"keywords\": {\"type\": \"str\", \"description\": \"The keyword to search for.\"}}, \"response\": {\"best_matchs\": {\"type\": \"Union[List[dict], dict]\", \"description\": \"The best match tool(s).\"}}}\nUser: Update Jerry's personal information and address. Password is zxcvbn. Address is 345 Main St.\nAPI-Request: [ToolSearcher(keywords='AccountInfo')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'AccountInfo'}, 'output': {'name': 'AccountInfo', 'description': 'API for retrieving and updating user account information.', 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'success or failed'}, 'account_info': {'type': 'dict', 'description': 'User account information'}}}, 'exception': None}\nAPI-Request: [AccountInfo(username='Jerry', password='zxcvbn')]->{'api_name': 'AccountInfo', 'input': {'username': 'Jerry', 'password': 'zxcvbn'}, 'output': {'email': 'jerry@example.com', 'phone': '7897897890'}, 'exception': None}\nAPI-Request: [ToolSearcher(keywords='PersonalInfoUpdate')]->{'api_name': 'ToolSearcher', 'input': {'keywords': 'PersonalInfoUpdate'}, 'output': {'name': 'PersonalInfoUpdate', 'description': \"The API for updating a user's personal information and address.\", 'input_parameters': {'username': {'type': 'str', 'description': 'Name of the user.'}, 'password': {'type': 'str', 'description': 'Password of the user.'}, 'address': {'type': 'str', 'description': 'Updated address information.'}}, 'output_parameters': {'status': {'type': 'str', 'description': 'Success or failure'}}}, 'exception': None}\nGenerate API Request: \n",
        "output": "API-Request: [PersonalInfoUpdate(username='Jerry', password='zxcvbn', address='345 Main St')]",
        "sample_id": 49,
        "api_id": 3
    }
]