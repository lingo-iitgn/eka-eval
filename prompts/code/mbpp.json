{
  "mbpp_0shot": {
    "template": "Write a Python function to solve the following problem. Provide your solution in a code block.\n\nProblem: {problem_description}\n\n{test_examples}Solution:\n```python\n",
    "description": "Zero-shot MBPP prompt for code generation"
  },
  "mbpp_0shot_simple": {
    "template": "Problem: {problem_description}\n\nWrite a Python function:\n```python\n",
    "description": "Simple MBPP prompt"
  },
  "mbpp_3shot": {
    "template_prefix": "You are an expert Python programmer. Write functions to solve the given problems. Here are some examples:\n\n",
    "few_shot_example_template": "Problem: {problem_description}\n\nSolution:\n```python\n{solution}\n```",
    "few_shot_separator": "\n\n",
    "template_suffix": "Problem: {problem_description}\n\n{test_examples}Solution:\n```python\n",
    "description": "Few-shot MBPP prompt template"
  },
  "mbpp_cot": {
    "template": "Think step by step to solve this programming problem.\n\nProblem: {problem_description}\n\n{test_examples}Let me break this down:\n1. First, I need to understand what the function should do\n2. Then, I'll implement the logic step by step\n3. Finally, I'll make sure it handles all cases\n\nSolution:\n```python\n",
    "description": "Chain-of-thought MBPP prompt"
  },
  "mbpp_instruct": {
    "template": "### Instruction:\nWrite a Python function that solves the following problem:\n\n### Problem:\n{problem_description}\n\n{test_examples}### Response:\n```python\n",
    "description": "Instruction-following format for MBPP"
  },
  "default_few_shot_examples_mbpp": [
    {
      "problem_description": "Write a function to find the minimum number of swaps required to group all 1's together in a binary array.",
      "solution": "def min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count <= 1:\n        return 0\n    \n    # Count zeros in first window of size ones_count\n    zeros_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 0:\n            zeros_in_window += 1\n    \n    min_zeros = zeros_in_window\n    \n    # Slide the window\n    for i in range(ones_count, len(arr)):\n        # Remove leftmost element\n        if arr[i - ones_count] == 0:\n            zeros_in_window -= 1\n        # Add rightmost element\n        if arr[i] == 0:\n            zeros_in_window += 1\n        \n        min_zeros = min(min_zeros, zeros_in_window)\n    \n    return min_zeros"
    },
    {
      "problem_description": "Write a function to check if a given number is a perfect square.",
      "solution": "def is_perfect_square(num):\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    \n    sqrt_num = int(num ** 0.5)\n    return sqrt_num * sqrt_num == num"
    },
    {
      "problem_description": "Write a function to find the longest common prefix string amongst an array of strings.",
      "solution": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    \n    min_len = min(len(s) for s in strs)\n    \n    for i in range(min_len):\n        char = strs[0][i]\n        for s in strs:\n            if s[i] != char:\n                return strs[0][:i]\n    \n    return strs[0][:min_len]"
    }
  ],
  "test_examples_template": {
    "with_tests": "Example tests:\n{test_list}\n\n",
    "without_tests": ""
  },
  "evaluation_settings": {
    "default_max_new_tokens": 512,
    "default_batch_size": 1,
    "default_samples_per_task": 1,
    "default_k_values": [1],
    "generation_params": {
      "do_sample": true,
      "temperature": 0.1,
      "top_p": 0.95,
      "repetition_penalty": 1.03
    },
    "extraction_markers": {
      "code_start": "```python",
      "code_end": "```",
      "completion_marker": "[END]"
    }
  },
  "common_stop_sequences": [
    "```",
    "[END]",
    "def test_",
    "assert ",
    "# Test",
    "# Example usage",
    "if __name__"
  ]
}