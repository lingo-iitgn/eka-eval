{
  "humaneval_0shot": {
    "template": "Complete the following Python function by implementing the function body. Only provide the implementation code that goes inside the function.\n\n{problem_prompt}",
    "description": "Zero-shot HumanEval prompt for code completion"
  },
  "humaneval_0shot_simple": {
    "template": "{problem_prompt}",
    "description": "Simple HumanEval prompt - just the function signature and docstring"
  },
  "humaneval_3shot": {
    "template_prefix": "You are an expert Python programmer. Complete the following functions based on their docstrings and requirements. Here are some examples:\n\n",
    "few_shot_example_template": "{problem_prompt}{solution}",
    "few_shot_separator": "\n\n",
    "template_suffix": "Now complete this function:\n\n{problem_prompt}",
    "description": "Few-shot HumanEval prompt template"
  },
  "humaneval_cot": {
    "template": "You are an expert Python programmer. Think through this step by step and complete the function.\n\n{problem_prompt}\n\n# Let me think about this step by step:\n# 1. First, I need to understand what the function should do\n# 2. Then, I'll implement the logic\n# 3. Finally, I'll make sure it handles edge cases\n\n",
    "description": "Chain-of-thought HumanEval prompt"
  },
  "humaneval_instruct": {
    "template": "### Instruction:\nComplete the following Python function according to its docstring:\n\n### Input:\n{problem_prompt}\n\n### Response:\n",
    "description": "Instruction-following format for HumanEval"
  },
  "default_few_shot_examples_humaneval": [
    {
      "problem_prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
      "solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n"
    },
    {
      "problem_prompt": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
      "solution": "    return number % 1.0\n"
    },
    {
      "problem_prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
      "solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n"
    }
  ],
  "evaluation_settings": {
    "default_max_new_tokens": 384,
    "default_batch_size": 1,
    "default_samples_per_task": 1,
    "default_k_values": [1],
    "generation_params": {
      "do_sample": true,
      "temperature": 0.2,
      "top_p": 0.95,
      "stop_sequences": ["def ", "class ", "if __name__", "print(", "assert "]
    }
  },
  "common_stop_sequences": [
    "def ",
    "class ",
    "if __name__",
    "print(",
    "assert ",
    "</s>",
    "<|EOT|>",
    "# Test",
    "# Example"
  ]
}