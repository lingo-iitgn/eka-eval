{"task_id": "11", "problem_description": "Write a python function to remove first and last occurrence of a given character from the string.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\nimport math\n\ndef remove_first_and_last_occurrence_of_character(string, character):\n    #... implementation...\n    result = string.replace(character, \"\")\n    return result\n JADX\n```\n", "extracted_code": "import math\n\ndef remove_first_and_last_occurrence_of_character(string, character):\n    #... implementation...\n    result = string.replace(character, \"\")\n    return result\n JADX", "code_for_eval": "import math\n\ndef remove_first_and_last_occurrence_of_character(string, character):\n    #... implementation...\n    result = string.replace(character, \"\")\n    return result\n JADX", "reference_test_script": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
{"task_id": "12", "problem_description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\nimport math\n\ndef sort_matrix(matrix):\n    #... implementation...\n    sorted_matrix = matrix\n    return sorted_matrix\n JADX\n```\n", "extracted_code": "import math\n\ndef sort_matrix(matrix):\n    #... implementation...\n    sorted_matrix = matrix\n    return sorted_matrix\n JADX", "code_for_eval": "import math\n\ndef sort_matrix(matrix):\n    #... implementation...\n    sorted_matrix = matrix\n    return sorted_matrix\n JADX", "reference_test_script": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
{"task_id": "13", "problem_description": "Write a function to count the most common words in a dictionary.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to count the most common words in a dictionary.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to count the most common words in a dictionary.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    #... implementation...\n    result = param1 + param2\n    return result\n JADX\n```", "extracted_code": "import math\n\ndef your_function_name(param1, param2):\n    #... implementation...\n    result = param1 + param2\n    return result\n JADX", "code_for_eval": "import math\n\ndef your_function_name(param1, param2):\n    #... implementation...\n    result = param1 + param2\n    return result\n JADX", "reference_test_script": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
{"task_id": "14", "problem_description": "Write a python function to find the volume of a triangular prism.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to find the volume of a triangular prism.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to find the volume of a triangular prism.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\nimport math\n\ndef volume_of_prism(base_area, height):\n    #... implementation...\n    result = base_area * height\n    return result\n JADXSOLUTIONEND\n```", "extracted_code": "import math\n\ndef volume_of_prism(base_area, height):\n    #... implementation...\n    result = base_area * height\n    return result\n JADXSOLUTIONEND", "code_for_eval": "import math\n\ndef volume_of_prism(base_area, height):\n    #... implementation...\n    result = base_area * height\n    return result\n JADXSOLUTIONEND", "reference_test_script": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
{"task_id": "15", "problem_description": "Write a function to split a string at lowercase letters.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to split a string at lowercase letters.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to split a string at lowercase letters.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\nimport math\n\ndef split_string_at_lowercase_letters(string):\n    #... implementation...\n    result = string.split()\n    return result\n JADXSPLIT_STRING_AT_LOWERCASE_LETTERS\n```\n", "extracted_code": "import math\n\ndef split_string_at_lowercase_letters(string):\n    #... implementation...\n    result = string.split()\n    return result\n JADXSPLIT_STRING_AT_LOWERCASE_LETTERS", "code_for_eval": "import math\n\ndef split_string_at_lowercase_letters(string):\n    #... implementation...\n    result = string.split()\n    return result\n JADXSPLIT_STRING_AT_LOWERCASE_LETTERS", "reference_test_script": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
