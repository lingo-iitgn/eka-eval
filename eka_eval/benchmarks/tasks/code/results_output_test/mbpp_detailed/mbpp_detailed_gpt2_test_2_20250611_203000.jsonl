{"task_id": "11", "problem_description": "Write a python function to remove first and last occurrence of a given character from the string.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n\nfrom math import *\n\n# This will print out the number of characters in the string that we need removed before removing them from the string.\n\n# We can now use our own functions as well.\n\n# For instance, if we want to do something like this:\n\n# Remove all occurrences of 'a' from the string \"abc\"\n\n# Then add some other words here so they don't get added to the string\n\n# Now we have two ways to handle these cases.\n\n# First, let's define a new variable called `arguments` which contains the arguments needed to run", "extracted_code": "from math import *\n\n# This will print out the number of characters in the string that we need removed before removing them from the string.\n\n# We can now use our own functions as well.\n\n# For instance, if we want to do something like this:\n\n# Remove all occurrences of 'a' from the string \"abc\"\n\n# Then add some other words here so they don't get added to the string\n\n# Now we have two ways to handle these cases.\n\n# First, let's define a new variable called `arguments` which contains the arguments needed to run", "code_for_eval": "from math import *\n\n# This will print out the number of characters in the string that we need removed before removing them from the string.\n\n# We can now use our own functions as well.\n\n# For instance, if we want to do something like this:\n\n# Remove all occurrences of 'a' from the string \"abc\"\n\n# Then add some other words here so they don't get added to the string\n\n# Now we have two ways to handle these cases.\n\n# First, let's define a new variable called `arguments` which contains the arguments needed to run", "reference_test_script": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
{"task_id": "12", "problem_description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n\nimport math\n\ndef my_function_name(param1, param2): \"\"\"Returns the name of the function that returns the result from the input string `my_function_name`. \"\"\"\n\n# This will print out the number of arguments passed to the function as well as the length of the argument list.\n\n# If you want to use this method instead of calling the function directly, add a line at the bottom of the file where the call was made.\n\n# Note that if you're using Python 3 or later, then you'll need to pass in a separate class called __init__() which", "extracted_code": "import math\n\ndef my_function_name(param1, param2): \"\"\"Returns the name of the function that returns the result from the input string `my_function_name`. \"\"\"\n\n# This will print out the number of arguments passed to the function as well as the length of the argument list.\n\n# If you want to use this method instead of calling the function directly, add a line at the bottom of the file where the call was made.\n\n# Note that if you're using Python 3 or later, then you'll need to pass in a separate class called __init__() which", "code_for_eval": "import math\n\ndef my_function_name(param1, param2): \"\"\"Returns the name of the function that returns the result from the input string `my_function_name`. \"\"\"\n\n# This will print out the number of arguments passed to the function as well as the length of the argument list.\n\n# If you want to use this method instead of calling the function directly, add a line at the bottom of the file where the call was made.\n\n# Note that if you're using Python 3 or later, then you'll need to pass in a separate class called __init__() which", "reference_test_script": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
