{"task_id": "11", "problem_description": "Write a python function to remove first and last occurrence of a given character from the string.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a python function to remove first and last occurrence of a given character from the string.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n\n#!/usr/bin/env python import math\n\nfrom pandas import *\n\nfrom pandas.utils import _\n\nfrom pandas.utils import unicode\n\nfrom pandas.utils import str\n\nfrom pandas.utils import regex\n\nfrom pandas.utils import strings\n\nfrom pandas.utils import dict\n\nfrom pandas._ import urllib\n\nfrom pandas.utils import gettext\n\nfrom pandas.utils import parsetext\n\n\"\"\"\n\nfor i in range(0, len(args)) do |a| if __name__ ==", "extracted_code": "from pandas import *\n\nfrom pandas.utils import _\n\nfrom pandas.utils import unicode\n\nfrom pandas.utils import str\n\nfrom pandas.utils import regex\n\nfrom pandas.utils import strings\n\nfrom pandas.utils import dict\n\nfrom pandas._ import urllib\n\nfrom pandas.utils import gettext\n\nfrom pandas.utils import parsetext\n\n\"\"\"\n\nfor i in range(0, len(args)) do |a| if __name__ ==", "code_for_eval": "from pandas import *\n\nfrom pandas.utils import _\n\nfrom pandas.utils import unicode\n\nfrom pandas.utils import str\n\nfrom pandas.utils import regex\n\nfrom pandas.utils import strings\n\nfrom pandas.utils import dict\n\nfrom pandas._ import urllib\n\nfrom pandas.utils import gettext\n\nfrom pandas.utils import parsetext\n\n\"\"\"\n\nfor i in range(0, len(args)) do |a| if __name__ ==", "reference_test_script": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
{"task_id": "12", "problem_description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.", "full_llm_prompt": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n", "raw_generation": "You are an expert Python programmer. Given the following problem description and example tests, write a Python function to solve it.\n\nProblem: Write a function to sort a given matrix in ascending order according to the sum of its rows.\n\nYour solution should be a single Python code block, including necessary imports. The code block should start with ```python and end with ```. Inside the code block, ensure your function definition is complete. Signal the end of your functional code (before the final ```) with the special token [END].\n\nExample of the desired output format:\n```python\nimport math\n\ndef your_function_name(param1, param2):\n    # ... implementation ...\n    result = param1 + param2\n    return result\n[END]\n```\n\nNow, provide the solution for the problem described above:\n```python\n\nimport math\n\ndef my_function_name(param1, param2): \"\"\"Returns the name of the function that returns the result from the input string `my_function_name`. \"\"\"\n\nMy function name is \"my_function\". It's not required to have any arguments or parameters. If you want to use this function as a template, add the following line at the top of your file:\n\n\"\"\"\n\n# This will make sure we're using our own functions instead of ours!\n\nmy_function_name = lambda x : y = {\n\nx: x[0]\n", "extracted_code": "import math\n\ndef my_function_name(param1, param2): \"\"\"Returns the name of the function that returns the result from the input string `my_function_name`. \"\"\"\n\nMy function name is \"my_function\". It's not required to have any arguments or parameters. If you want to use this function as a template, add the following line at the top of your file:\n\n\"\"\"\n\n# This will make sure we're using our own functions instead of ours!\n\nmy_function_name = lambda x : y = {\n\nx: x[0]", "code_for_eval": "import math\n\ndef my_function_name(param1, param2): \"\"\"Returns the name of the function that returns the result from the input string `my_function_name`. \"\"\"\n\nMy function name is \"my_function\". It's not required to have any arguments or parameters. If you want to use this function as a template, add the following line at the top of your file:\n\n\"\"\"\n\n# This will make sure we're using our own functions instead of ours!\n\nmy_function_name = lambda x : y = {\n\nx: x[0]", "reference_test_script": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "passed": null, "pass_at_k_metric_details": null, "error_message": ""}
